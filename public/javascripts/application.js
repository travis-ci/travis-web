minispade.register('templates', "(function() {Ember.TEMPLATES['builds/list']=Ember.Handlebars.compile(\"{{#with view.builds}}\\n  <table id=\\\"builds\\\" class=\\\"list\\\">\\n    <thead>\\n      <tr>\\n        <th>{{t builds.name}}</th>\\n        <th>{{t builds.commit}}</th>\\n        <th>{{t builds.message}}</th>\\n        <th>{{t builds.duration}}</th>\\n        <th>{{t builds.finished_at}}</th>\\n      </tr>\\n    </thead>\\n\\n    <tbody>\\n      {{#each build in content}}\\n        {{#view Travis.Views.BuildsItemView contextBinding=\\\"build\\\"}}\\n          <tr {{bindAttr class=\\\"view.color\\\"}}>\\n            <td class=\\\"number\\\"><a {{bindAttr href=\\\"view.urlBuild\\\"}}>{{number}}</a></td>\\n            <td class=\\\"commit\\\"><a {{bindAttr href=\\\"view.urlGithubCommit\\\"}}>{{formatCommit commit}}</a></td>\\n            <td class=\\\"message\\\">{{{formatMessage commit.message short=\\\"true\\\"}}}</td>\\n            <td class=\\\"duration\\\" {{bindAttr title=\\\"started_at\\\"}}>{{formatDuration duration}}</td>\\n            <td class=\\\"finished_at timeago\\\" {{bindAttr title=\\\"finished_at\\\"}}>{{formatTime finished_at}}</td>\\n          </tr>\\n        {{/view}}\\n      {{/each}}\\n    </tbody>\\n  </table>\\n\\n  <p>\\n    <button {{action showMore on=\\\"click\\\" target=\\\"builds\\\" isVisibleBinding=\\\"hasMore\\\"}}>\\n      {{t builds.show_more}}\\n    </button>\\n  </p>\\n{{/with}}\\n\");Ember.TEMPLATES['builds/show']=Ember.Handlebars.compile(\"{{#with view}}\\n  {{#unless build.isLoaded}}\\n    Loading ...\\n  {{else}}\\n    <div id=\\\"build\\\" {{bindAttr class=\\\"color\\\"}}>\\n      <dl id=\\\"summary\\\">\\n        <div class=\\\"left\\\">\\n          <dt>{{t builds.name}}</dt>\\n          <dd class=\\\"number\\\"><a {{bindAttr href=\\\"urlBuild\\\"}}>{{build.number}}</a></dd>\\n          <dt class=\\\"finished_at_label\\\">{{t builds.finished_at}}</dt>\\n          <dd class=\\\"finished_at timeago\\\" {{bindAttr title=\\\"finished_at\\\"}}>{{formatTime build.finished_at}}</dd>\\n          <dt>{{t builds.duration}}</dt>\\n          <dd class=\\\"duration\\\" {{bindAttr title=\\\"started_at\\\"}}>{{formatDuration build.duration}}</dd>\\n        </div>\\n\\n        <div class=\\\"right\\\">\\n          <dt>{{t builds.commit}}</dt>\\n          <dd class=\\\"commit\\\"><a {{bindAttr href=\\\"urlGithubCommit\\\"}}>{{formatCommit build.commit}}</a></dd>\\n          {{#if commit.compareUrl}}\\n            <dt>{{t builds.compare}}</dt>\\n            <dd class=\\\"compare\\\"><a {{bindAttr href=\\\"commit.compareUrl\\\"}}>{{pathFrom build.commit.compareUrl}}</a></dd>\\n          {{/if}}\\n          {{#if commit.authorName}}\\n            <dt>{{t builds.author}}</dt>\\n            <dd class=\\\"author\\\"><a {{bindAttr href=\\\"urlAuthor\\\"}}>{{build.commit.authorName}}</a></dd>\\n          {{/if}}\\n          {{#if commit.committerName}}\\n            <dt>{{t builds.committer}}</dt>\\n            <dd class=\\\"committer\\\"><a {{bindAttr href=\\\"urlCommitter\\\"}}>{{build.commit.committerName}}</a></dd>\\n          {{/if}}\\n        </div>\\n\\n        <dt>{{t builds.message}}</dt>\\n        <dd class=\\\"message\\\">{{{formatMessage build.commit.message}}}</dd>\\n\\n        {{#unless isMatrix}}\\n          <dt>{{t builds.config}}</dt>\\n          <dd class=\\\"config\\\">{{formatConfig build.config}}</dd>\\n        {{/unless}}\\n      </dl>\\n\\n      {{#if build.isMatrix}}\\n        {{view Travis.Views.JobsView jobsBinding=\\\"requiredJobs\\\" required=\\\"true\\\"}}\\n        {{view Travis.Views.JobsView jobsBinding=\\\"allowedFailureJobs\\\"}}\\n      {{else}}\\n        {{view Travis.Views.LogView contextBinding=\\\"build.jobs.firstObject\\\"}}\\n      {{/if}}\\n    </div>\\n  {{/unless}}\\n{{/with}}\\n\");Ember.TEMPLATES['jobs/list']=Ember.Handlebars.compile(\"{{#with view.jobs}}\\n  {{#if length}}\\n      {{#if view.required}}\\n        <table id=\\\"jobs\\\" class=\\\"list\\\">\\n          <caption>\\n            {{t jobs.build_matrix}}\\n          </caption>\\n      {{else}}\\n        <table id=\\\"allowed_failure_jobs\\\" class=\\\"list\\\">\\n          <caption>\\n            {{t jobs.allowed_failures}}\\n            <a title=\\\"What's this?\\\" class=\\\"help\\\" {{action toggleHelp}}></a>\\n          </caption>\\n      {{/if}}\\n      <thead>\\n        <tr>\\n          {{#each configKeys}}\\n            <th>{{this}}</th>\\n          {{/each}}\\n        </tr>\\n      </thead>\\n      <tbody>\\n        {{#each job in view.jobs}}\\n          {{#view Travis.Views.JobsItemView contextBinding=\\\"job\\\"}}\\n            <tr {{bindAttr class=\\\"view.color\\\"}}>\\n              <td class=\\\"number\\\"><a {{bindAttr href=\\\"view.urlJob\\\"}}>{{number}}</a></td>\\n              <td class=\\\"duration\\\" {{bindAttr title=\\\"started_at\\\"}}>{{formatDuration duration}}</td>\\n              <td class=\\\"finished_at timeago\\\" {{bindAttr title=\\\"finished_at\\\"}}>{{formatTime finished_at}}</td>\\n              {{#each configValues}}\\n                <td>{{this}}</td>\\n              {{/each}}\\n            </tr>\\n          {{/view}}\\n        {{/each}}\\n      </tbody>\\n    </table>\\n\\n    {{#unless view.required}}\\n      <div id=\\\"allow_failure_help\\\" class=\\\"context_help\\\">\\n        <div class=\\\"context_help_caption\\\">{{t \\\"jobs.allowed_failures\\\"}}</div>\\n        <div class=\\\"context_help_body\\\">\\n          <p>\\n            Allowed Failures are items in your build matrix that are allowed to\\n            fail without causing the entire build to be shown as failed. This lets you add\\n            in experimental and preparatory builds to test against versions or\\n            configurations that you are not ready to officially support.\\n          </p>\\n          <p>\\n            You can define allowed failures in the build matrix as follows:\\n          </p>\\n          <pre> matrix:\\n    allow_failures:\\n      - rvm: ruby-head </pre>\\n        </div>\\n      </div>\\n    {{/unless}}\\n  {{/if}}\\n{{/with}}\\n\");Ember.TEMPLATES['jobs/log']=Ember.Handlebars.compile(\"{{#with job}}\\n  <pre id=\\\"log\\\">{{{formatLog log.body}}}</pre>\\n\\n  {{#if sponsor.name}}\\n    <p class=\\\"sponsor\\\">\\n    {{t builds.messages.sponsored_by}}\\n      <a {{bindAttr href=\\\"sponsor.url\\\"}}>{{sponsor.name}}</a>\\n    </p>\\n  {{/if}}\\n{{/with}}\\n\");Ember.TEMPLATES['jobs/show']=Ember.Handlebars.compile(\"{{#with view}}\\n  {{#if job.isLoaded}}\\n    <div {{bindAttr class=\\\"view.color\\\"}}>\\n      <dl id=\\\"summary\\\">\\n        <div class=\\\"left\\\">\\n          <dt>Job</dt>\\n          <dd class=\\\"number\\\"><a {{bindAttr href=\\\"view.urlJob\\\"}}>{{job.number}}</a></dd>\\n          <dt class=\\\"finished_at_label\\\">{{t jobs.finished_at}}</dt>\\n          <dd class=\\\"finished_at timeago\\\" {{bindAttr title=\\\"finished_at\\\"}}>{{formatTime job.finished_at}}</dd>\\n          <dt>{{t jobs.duration}}</dt>\\n          <dd class=\\\"duration\\\" {{bindAttr title=\\\"started_at\\\"}}>{{formatDuration job.duration}}</dd>\\n        </div>\\n\\n        <div class=\\\"right\\\">\\n          <dt>{{t jobs.commit}}</dt>\\n          <dd class=\\\"commit-hash\\\"><a {{bindAttr href=\\\"urlGithubCommit\\\"}}>{{formatCommit commit}}</a></dd>\\n          {{#if commit.compareUrl}}\\n            <dt>{{t jobs.compare}}</dt>\\n            <dd class=\\\"compare_view\\\"><a {{bindAttr href=\\\"commit.compareUrl\\\"}}>{{pathFrom commit.compareUrl}}</a></dd>\\n          {{/if}}\\n          {{#if commit.authorName}}\\n            <dt>{{t jobs.author}}</dt>\\n            <dd class=\\\"author\\\"><a {{bindAttr href=\\\"urlAuthor\\\"}}>{{commit.authorName}}</a></dd>\\n          {{/if}}\\n          {{#if commit.committerName}}\\n            <dt>{{t jobs.committer}}</dt>\\n            <dd class=\\\"committer\\\"><a {{bindAttr href=\\\"urlCommitter\\\"}}>{{commit.committerName}}</a></dd>\\n          {{/if}}\\n        </div>\\n\\n        <dt>{{t jobs.message}}</dt>\\n        <dd class=\\\"commit-message\\\">{{formatMessage commit.message}}</dd>\\n        <dt>{{t jobs.config}}</dt>\\n        <dd class=\\\"config\\\">{{formatConfig job.config}}</dd>\\n      </dl>\\n\\n      {{view Travis.Views.LogView}}\\n    </div>\\n  {{/if}}\\n{{/with}}\\n\");Ember.TEMPLATES['layouts/home']=Ember.Handlebars.compile(\"<div id=\\\"top\\\">\\n  {{outlet top}}\\n</div>\\n\\n<div id=\\\"left\\\">\\n  <div id=\\\"search_box\\\">\\n    <input type=\\\"text\\\">\\n  </div>\\n\\n  <ul class=\\\"tabs\\\">\\n    <li id=\\\"tab_recent\\\" class=\\\"active\\\">\\n      <h5><a href=\\\"#\\\">{{t layouts.application.recent}}</a></h5>\\n    </li>\\n    {{#if currentUser}}\\n      <li id=\\\"tab_my_repos\\\">\\n        <h5><a href=\\\"#\\\">{{t layouts.application.my_repositories}}</a></h5>\\n      </li>\\n    {{/if}}\\n    <li id=\\\"tab_search\\\">\\n      <h5><a href=\\\"#\\\">{{t layouts.application.search}}</a></h5>\\n    </li>\\n  </ul>\\n\\n  <div class=\\\"tab\\\">\\n    {{outlet left}}\\n  </div>\\n</div>\\n\\n<div id=\\\"main\\\">\\n  {{outlet main}}\\n\\n  {{outlet tabs}}\\n\\n  <div class=\\\"tab\\\">\\n    {{outlet tab}}\\n  </div>\\n\\n  <div id=\\\"right\\\">\\n    {{outlet right}}\\n  </div>\\n</div>\\n\\n\");Ember.TEMPLATES['layouts/sidebar']=Ember.Handlebars.compile(\"<a id=\\\"github\\\" href=\\\"https://github.com/travis-ci\\\" title=\\\"Fork me on GitHub\\\">\\n  {{t layouts.application.fork_me}}\\n</a>\\n\\n<div id=\\\"slider\\\" {{action toggleSidebar}}>\\n  <div class='icon'></div>&nbsp;\\n</div>\\n\\n{{view templateName=\\\"sponsors/decks\\\"}}\\n{{view templateName=\\\"workers/list\\\" id=\\\"workers\\\"}}\\n{{view templateName=\\\"queues/list\\\" id=\\\"queues\\\"}}\\n{{view templateName=\\\"sponsors/links\\\"}}\\n\\n<div id=\\\"alpha_warning\\\" class=\\\"box\\\">\\n  <h4>{{t layouts.about.alpha}}</h4>\\n  <p>{{{t layouts.about.messages.alpha}}}</p>\\n</div>\\n\\n<div id=\\\"about\\\" class=\\\"box\\\">\\n  <h4>{{t layouts.about.join}}</h4>\\n  <ul>\\n    <li>{{t layouts.about.repository}}: <a href=\\\"http://github.com/travis-ci\\\">Github</a></li>\\n    <li>{{t layouts.about.twitter}}: <a href=\\\"http://twitter.com/travisci\\\">@travisci</a></li>\\n    <li>{{t layouts.about.mailing_list}}: <a href=\\\"http://groups.google.com/group/travis-ci\\\">travis-ci</a></li>\\n    <li><a href=\\\"irc://irc.freenode.net#travis\\\">irc.freenode.net#travis</a></li>\\n  </ul>\\n</div>\\n\");Ember.TEMPLATES['layouts/simple']=Ember.Handlebars.compile(\"<div id=\\\"top\\\">\\n  {{outlet top}}\\n</div>\\n\\n<div id=\\\"main\\\">\\n  {{outlet main}}\\n</div>\\n\\n\");Ember.TEMPLATES['layouts/top']=Ember.Handlebars.compile(\"<a href=\\\"#\\\">\\n  <h1>Travis</h1>\\n</a>\\n\\n<ul id=\\\"navigation\\\">\\n  <li {{bindAttr class=\\\"view.classHome\\\"}}>\\n  <a href=\\\"#\\\">\\n    {{t home.name}}\\n  </a>\\n  </li>\\n  <li {{bindAttr class=\\\"view.classStats\\\"}}>\\n    <a href=\\\"#!/stats\\\">Stats</a>\\n  </li>\\n  <li>\\n    <a href=\\\"http://about.travis-ci.org/blog\\\">Blog</a>\\n  </li>\\n  <li>\\n    <a href=\\\"http://about.travis-ci.org/docs\\\">Docs</a>\\n  </li>\\n  {{#if user}}\\n    <li {{bindAttr class=\\\"view.classProfile\\\"}} {{action hideProfile on=\\\"mouseLeave\\\"}}>\\n      <a href=\\\"#!/profile\\\" class=\\\"name\\\" {{action showProfile on=\\\"mouseEnter\\\"}}>\\n        <img {{bindAttr src=\\\"view.gravatarUrl\\\"}}>\\n        {{user.name}}\\n      </a>\\n      <ul>\\n        <li>\\n          <a href=\\\"#!/profile\\\">{{t layouts.top.profile}}</a>\\n        </li>\\n        <li>\\n          <a {{action signOut}}>{{t layouts.top.sign_out}}</a>\\n        </li>\\n      </ul>\\n    </li>\\n  {{else}}\\n    <li {{bindAttr class=\\\"view.classProfile\\\"}}>\\n      <a href=\\\"#\\\" {{action signIn}}>{{t layouts.top.github_login}}</a>\\n    </li>\\n  {{/if}}\\n</ul>\\n\");Ember.TEMPLATES['profile/hooks']=Ember.Handlebars.compile(\"{{#if content.length}}\\n  <ul id=\\\"hooks\\\">\\n  {{#each content}}\\n    <li {{bindAttr class=\\\"active\\\"}}>\\n      <a {{bindAttr href=\\\"urlGithub\\\"}} rel=\\\"nofollow\\\">{{owner}}/{{name}}</a>\\n      <p class=\\\"description\\\">{{description}}</p>\\n\\n      <div class=\\\"controls\\\">\\n        <a {{bindAttr href=\\\"urlGithubAdmin\\\"}} class=\\\"github-admin tool-tip\\\" title=\\\"Github service hooks admin page\\\"></a>\\n        <a {{action toggle}} class=\\\"switch\\\"></a>\\n      </div>\\n    </li>\\n  {{/each}}\\n  </ul>\\n{{else}}\\n  <p class=\\\"sync\\\">Please wait while we sync with GitHub</p>\\n{{/if}}\\n\\n\");Ember.TEMPLATES['profile/show']=Ember.Handlebars.compile(\"<h2>{{name}}</h2>\\n<img {{bindAttr src=\\\"view.gravatarUrl\\\"}}>\\n\\n<dl class=\\\"profile\\\">\\n  <dt>\\n    {{t profiles.show.github}}:\\n  </dt>\\n  <dd>\\n    <a {{bindAttr href=\\\"urlGithub\\\"}}>{{login}}</a>\\n  </dd>\\n  <dt>\\n    {{t profiles.show.email}}:\\n  </dt>\\n  <dd>\\n    {{email}}\\n  </dd>\\n  <dt>\\n    {{t profiles.show.token}}:\\n  </dt>\\n  <dd>\\n    {{token}}\\n  </dd>\\n</dl>\\n\\n<p class=\\\"notice\\\">\\n  {{{t profiles.show.messages.notice}}}\\n</p>\\n\\n<h4>{{t profiles.show.your_locale}}</h4>\\n<form>\\n  <select name=\\\"user[locale]\\\">\\n  </select>\\n  <button name=\\\"commit\\\">\\n    {{t profiles.show.update_locale}}\\n  </button>\\n</form>\\n\\n<h4>{{t profiles.show.your_repos}}</h4>\\n<p class=\\\"tip\\\">\\n  {{{t profiles.show.message.your_repos}}}\\n  <a href=\\\"http://about.travis-ci.org/docs/user/build-configuration\\\">\\n    {{{t profiles.show.message.config}}}\\n  </a>\\n</p>\\n\\n{{outlet hooks}}\\n\");Ember.TEMPLATES['queues/list']=Ember.Handlebars.compile(\"{{#each queue in queues}}\\n  <h4>{{t queue}}: {{queue.name}}</h4>\\n  <ul>\\n    {{#each queue}}\\n      <li>\\n        {{repository.slug}}\\n        {{#if number}}\\n          #{{number}}\\n        {{/if}}\\n      </li>\\n    {{else}}\\n      {{t no_job}}\\n    {{/each}}\\n  </ul>\\n{{/each}}\\n\");Ember.TEMPLATES['repositories/list']=Ember.Handlebars.compile(\"<ul id=\\\"repositories\\\">\\n  {{#each repository in controller.content}}\\n    {{#view Travis.Views.RepositoriesItemView contextBinding=\\\"repository\\\"}}\\n      <li {{bindAttr class=\\\"view.classes\\\"}}>\\n        <a {{bindAttr href=\\\"view.urlRepository\\\"}} class=\\\"current\\\">{{slug}}</a>\\n        <a {{bindAttr href=\\\"view.urlLastBuild\\\"}} class=\\\"last_build\\\">#{{lastBuildNumber}}</a>\\n\\n        <p class=\\\"summary\\\">\\n          <span class=\\\"duration_label\\\">{{t repositories.duration}}:</span>\\n          <abbr class=\\\"duration\\\" {{bindAttr title=\\\"lastBuildStartedAt\\\"}}>{{formatDuration lastBuildDuration}}</abbr>,\\n          <span class=\\\"finished_at_label\\\">{{t repositories.finished_at}}:</span>\\n          <abbr class=\\\"finished_at timeago\\\" {{bindAttr title=\\\"lastBuildFinishedAt\\\"}}>{{formatTime lastBuildFinished_at}}</abbr>\\n        </p>\\n        {{#if description}}\\n          <p class=\\\"description\\\">{{description}}</p>\\n        {{/if}}\\n        <span class=\\\"indicator\\\"></span>\\n      </li>\\n    {{/view}}\\n  {{else}}\\n    <li class=\\\"loading\\\">\\n      <p>Loading</p>\\n    </li>\\n  {{/each}}\\n<ul>\\n\");Ember.TEMPLATES['repositories/show']=Ember.Handlebars.compile(\"{{#with view.repository}}\\n  {{#unless isLoaded}}\\n    Loading ...\\n  {{else}}\\n    <div id=\\\"repository\\\">\\n      <h3>\\n        <a {{bindAttr href=\\\"view.urlGithub\\\"}}>{{slug}}</a>\\n      </h3>\\n\\n      <p class=\\\"description\\\">{{description}}</p>\\n\\n      <ul class=\\\"github-stats\\\">\\n        <li class=\\\"language\\\">{{lastBuildLanguage}}</li>\\n        <li><a class=\\\"watchers\\\" title=\\\"Watches\\\" {{bindAttr href=\\\"view.urlGithubWatchers\\\"}}>{{stats.watchers}}</a></li>\\n        <li><a class=\\\"forks\\\" title=\\\"Forks\\\" {{bindAttr href=\\\"view.urlGithubNetwork\\\"}}>{{stats.forks}}</a></li>\\n      </ul>\\n    </div>\\n  {{/unless}}\\n{{/with}}\\n\");Ember.TEMPLATES['repositories/tabs']=Ember.Handlebars.compile(\"<ul class=\\\"tabs\\\">\\n  <li id=\\\"tab_current\\\" {{bindAttr class=\\\"view.classCurrent\\\"}}>\\n    <h5><a {{bindAttr href=\\\"view.urlRepository\\\"}}>{{t repositories.tabs.current}}</a></h5>\\n  </li>\\n  <li id=\\\"tab_builds\\\" {{bindAttr class=\\\"view.classBuilds\\\"}}>\\n    <h5><a {{bindAttr href=\\\"view.urlBuilds\\\"}}>{{t repositories.tabs.build_history}}</a></h5>\\n  </li>\\n  <li id=\\\"tab_pull_requests\\\" {{bindAttr class=\\\"view.classPullRequests\\\"}}>\\n    <h5><a {{bindAttr href=\\\"view.urlPullRequests\\\"}}>{{t repositories.tabs.pull_requests}}</a></h5>\\n  </li>\\n  <li id=\\\"tab_branches\\\" {{bindAttr class=\\\"view.classBranches\\\"}}>\\n    <h5><a {{bindAttr href=\\\"view.urlBranches\\\"}}>{{t repositories.tabs.branches}}</a></h5>\\n  </li>\\n  {{#if view.isBuildTab}}\\n    {{#with view.build}}\\n      <li id=\\\"tab_build\\\" {{bindAttr class=\\\"view.classBuild\\\"}}>\\n        <h5><a {{bindAttr href=\\\"view.urlBuild\\\"}}>{{t repositories.tabs.build}} #{{number}}</a></h5>\\n      </li>\\n    {{/with}}\\n  {{/if}}\\n  {{#if view.isJobTab}}\\n    {{#with view.job}}\\n      <li id=\\\"tab_job\\\" {{bindAttr class=\\\"view.classJob\\\"}}>\\n        <h5><a {{bindAttr href=\\\"view.urlJob\\\"}}>{{t repositories.tabs.job}} #{{number}}</a></h5>\\n      </li>\\n    {{/with}}\\n  {{/if}}\\n</ul>\\n\\n<div id=\\\"tools\\\">\\n  <a href=\\\"#\\\" {{action toggleTools}}></a>\\n  <div class=\\\"pane\\\">\\n    <p><label>{{t repositories.branch}}:</label><select></select></p>\\n    <p><label>{{t repositories.image_url}}:</label><input type=\\\"text\\\" class=\\\"url\\\"></input></p>\\n    <p><label>{{t repositories.markdown}}:</label><input type=\\\"text\\\" class=\\\"markdown\\\"></input></p>\\n    <p><label>{{t repositories.textile}}:</label><input type=\\\"text\\\" class=\\\"textile\\\"></input></p>\\n    <p><label>{{t repositories.rdoc}}:</label><input type=\\\"text\\\" class=\\\"rdoc\\\"></input></p>\\n  </div>\\n</div>\\n\");Ember.TEMPLATES['sponsors/decks']=Ember.Handlebars.compile(\"<h4>{{t layouts.application.sponsers}}</h4>\\n\\n<ul class=\\\"sponsors top\\\">\\n  {{#each deck in sponsors.decks}}\\n    {{#each deck}}\\n      <li {{bindAttr class=\\\"type\\\"}}>\\n        <a {{bindAttr href=\\\"url\\\"}}>\\n          <img {{bindAttr src=\\\"image\\\"}}>\\n        </a>\\n      </li>\\n    {{/each}}\\n  {{/each}}\\n</ul>\\n\\n<p class=\\\"hint\\\">\\n  <a href=\\\"https://love.travis-ci.org/sponsors\\\">\\n    {{{t layouts.application.sponsors_link}}}\\n  </a>\\n</p>\\n\");Ember.TEMPLATES['sponsors/links']=Ember.Handlebars.compile(\"<div class=\\\"box\\\">\\n  <h4>{{t layouts.application.sponsers}}</h4>\\n\\n  <ul class=\\\"sponsors bottom\\\">\\n    {{#each sponsors.links}}\\n      <li>\\n        {{{link}}}\\n      </li>\\n    {{/each}}\\n  </ul>\\n\\n  <p class=\\\"hint\\\">\\n    <a href=\\\"https://love.travis-ci.org/sponsors\\\">\\n      {{{t layouts.application.sponsors_link}}}\\n    </a>\\n  </p>\\n</div>\\n\\n\");Ember.TEMPLATES['stats/show']=Ember.Handlebars.compile(\"Stats\\n\");Ember.TEMPLATES['workers/list']=Ember.Handlebars.compile(\"<h4>{{t workers}}</h4>\\n<ul>\\n  {{#each group in workers.groups}}\\n    <li class=\\\"group\\\">\\n      <h5>{{group.firstObject.host}}</h5>\\n      <ul>\\n      {{#each group}}\\n        <li class=\\\"worker\\\">\\n          {{#if isTesting}}\\n            <a {{bindAttr href=\\\"urlJob\\\"}} {{bindAttr title=\\\"lastSeenAt\\\"}}>{{display}}</a>\\n          {{else}}\\n            <span {{bindAttr title=\\\"lastSeenAt\\\"}}>{{display}}</span>\\n          {{/if}}\\n        </li>\\n      {{/each}}\\n      </ul>\\n    </li>\\n  {{else}}\\n    No workers\\n  {{/each}}\\n</ul>\\n\\n\");\n})();\n//@ sourceURL=templates");minispade.register('app', "(function() {(function() {\nminispade.require('hax0rs');\nminispade.require('ext/jquery');\n\n  this.Travis = Em.Namespace.create({\n    CONFIG_KEYS: ['rvm', 'gemfile', 'env', 'otp_release', 'php', 'node_js', 'perl', 'python', 'scala'],\n    INTERVALS: {\n      sponsors: -1,\n      times: -1\n    },\n    QUEUES: [\n      {\n        name: 'common',\n        display: 'Common'\n      }, {\n        name: 'jvmotp',\n        display: 'JVM and Erlang'\n      }\n    ],\n    run: function(attrs) {\n      return this.app = Travis.App.create(attrs || {});\n    },\n    App: Em.Application.extend({\n      init: function() {\n        this._super();\n        this.connect();\n        this.store = Travis.Store.create();\n        this.store.loadMany(Travis.Sponsor, Travis.SPONSORS);\n        this.routes = Travis.Router.create();\n        this.routes.start();\n        return this.initialize(Em.Object.create());\n      },\n      connect: function() {\n        var view;\n        this.controller = Em.Controller.create();\n        view = Em.View.create({\n          template: Em.Handlebars.compile('{{outlet layout}}'),\n          controller: this.controller\n        });\n        return view.appendTo(this.get('rootElement') || 'body');\n      },\n      layout: function(name) {\n        if (this._layout && this._layout.name === name) {\n          return this._layout;\n        } else {\n          return this._layout = Travis.Layout[$.camelize(name)].create({\n            parent: this.controller\n          });\n        }\n      }\n    })\n  });\nminispade.require('controllers');\nminispade.require('helpers');\nminispade.require('layout');\nminispade.require('models');\nminispade.require('router');\nminispade.require('store');\nminispade.require('templates');\nminispade.require('views');\nminispade.require('data/sponsors');\n\n}).call(this);\n\n})();\n//@ sourceURL=app");minispade.register('controllers', "(function() {(function() {\nminispade.require('helpers');\nminispade.require('travis/ticker');\n\n  Travis.Controllers = Em.Namespace.create({\n    RepositoriesController: Em.ArrayController.extend({\n      contentBinding: 'layout.repositories'\n    }),\n    RepositoryController: Em.Controller.extend({\n      repositoryBinding: 'layout.repository'\n    }),\n    TabsController: Em.Controller.extend({\n      repositoryBinding: 'layout.repository',\n      buildBinding: 'layout.build',\n      jobBinding: 'layout.job',\n      tabBinding: 'layout.tab'\n    }),\n    BuildsController: Em.ArrayController.extend({\n      repositoryBinding: 'layout.repository',\n      contentBinding: 'layout.builds'\n    }),\n    BuildController: Em.Controller.extend({\n      repositoryBinding: 'layout.repository',\n      buildBinding: 'layout.build'\n    }),\n    JobController: Em.Controller.extend({\n      repositoryBinding: 'layout.repository',\n      jobBinding: 'layout.job'\n    }),\n    QueuesController: Em.ArrayController.extend(),\n    UserController: Em.Controller.extend(),\n    HooksController: Em.ArrayController.extend()\n  });\nminispade.require('controllers/sponsors');\nminispade.require('controllers/workers');\n\n}).call(this);\n\n})();\n//@ sourceURL=controllers");minispade.register('controllers/sponsors', "(function() {(function() {\n\n  Travis.Controllers.SponsorsController = Em.ArrayController.extend({\n    page: 0,\n    arrangedContent: (function() {\n      return this.get('shuffled').slice(this.start(), this.end());\n    }).property('shuffled.length', 'page'),\n    shuffled: (function() {\n      var content;\n      if (content = this.get('content')) {\n        return $.shuffle(content);\n      } else {\n        return [];\n      }\n    }).property('content.length'),\n    next: function() {\n      return this.set('page', this.isLast() ? 0 : this.get('page') + 1);\n    },\n    pages: (function() {\n      var length;\n      length = this.getPath('content.length');\n      if (length) {\n        return parseInt(length / this.get('perPage') + 1);\n      } else {\n        return 1;\n      }\n    }).property('length'),\n    isLast: function() {\n      return this.get('page') === this.get('pages') - 1;\n    },\n    start: function() {\n      return this.get('page') * this.get('perPage');\n    },\n    end: function() {\n      return this.start() + this.get('perPage');\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=controllers/sponsors");minispade.register('controllers/workers', "(function() {(function() {\n  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  Travis.Controllers.WorkersController = Em.ArrayController.extend({\n    groups: (function() {\n      var groups, host, worker, _i, _len, _ref;\n      groups = {};\n      _ref = this.get('content').toArray();\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        worker = _ref[_i];\n        host = worker.get('host');\n        if (!(__indexOf.call(groups, host) >= 0)) {\n          groups[host] = Em.ArrayProxy.create({\n            content: []\n          });\n        }\n        groups[host].pushObject(worker);\n      }\n      return $.values(groups);\n    }).property('content.length')\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=controllers/workers");minispade.register('helpers', "(function() {(function() {\nminispade.require('helpers/handlebars');\nminispade.require('helpers/helpers');\nminispade.require('helpers/urls');\n\n}).call(this);\n\n})();\n//@ sourceURL=helpers");minispade.register('helpers/handlebars', "(function() {(function() {\n  var safe;\nminispade.require('ext/ember/bound_helper');\n\n  safe = function(string) {\n    return new Handlebars.SafeString(string);\n  };\n\n  Handlebars.registerHelper('tipsy', function(text, tip) {\n    return safe('<span class=\"tool-tip\" original-title=\"' + tip + '\">' + text + '</span>');\n  });\n\n  Handlebars.registerHelper('t', function(key) {\n    return safe(I18n.t(key));\n  });\n\n  Ember.registerBoundHelper('formatTime', function(value, options) {\n    return safe(Travis.Helpers.timeAgoInWords(value) || '-');\n  });\n\n  Ember.registerBoundHelper('formatDuration', function(duration, options) {\n    return safe(Travis.Helpers.timeInWords(duration));\n  });\n\n  Ember.registerBoundHelper('formatCommit', function(commit, options) {\n    if (commit) {\n      return safe(Travis.Helpers.formatCommit(commit.get('sha'), commit.get('branch')));\n    }\n  });\n\n  Ember.registerBoundHelper('formatSha', function(sha, options) {\n    return safe(Travis.Helpers.formatSha(sha));\n  });\n\n  Ember.registerBoundHelper('pathFrom', function(url, options) {\n    return safe(Travis.Helpers.pathFrom(url));\n  });\n\n  Ember.registerBoundHelper('formatMessage', function(message, options) {\n    return safe(Travis.Helpers.formatMessage(message, options));\n  });\n\n  Ember.registerBoundHelper('formatConfig', function(config, options) {\n    return safe(Travis.Helpers.formatConfig(config));\n  });\n\n  Ember.registerBoundHelper('formatLog', function(log, options) {\n    return Travis.Helpers.formatLog(log) || '';\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=helpers/handlebars");minispade.register('helpers/helpers', "(function() {(function() {\nminispade.require('travis/log');\n\n  this.Travis.Helpers = {\n    safe: function(string) {\n      return new Handlebars.SafeString(string);\n    },\n    colorForResult: function(result) {\n      if (result === 0) {\n        return 'green';\n      } else {\n        if (result === 1) {\n          return 'red';\n        } else {\n          return null;\n        }\n      }\n    },\n    formatCommit: function(sha, branch) {\n      return Travis.Helpers.formatSha(sha) + (branch ? \" (\" + branch + \")\" : '');\n    },\n    formatSha: function(sha) {\n      return (sha || '').substr(0, 7);\n    },\n    formatConfig: function(config) {\n      var values;\n      config = $.only(config, 'rvm', 'gemfile', 'env', 'otp_release', 'php', 'node_js', 'scala', 'jdk', 'python', 'perl');\n      values = $.map(config, function(value, key) {\n        value = (value && value.join ? value.join(', ') : value) || '';\n        return '%@: %@'.fmt($.camelize(key), value);\n      });\n      if (values.length === 0) {\n        return '-';\n      } else {\n        return values.join(', ');\n      }\n    },\n    formatMessage: function(message, options) {\n      message = message || '';\n      if (options.short) {\n        message = message.split(/\\n/)[0];\n      }\n      return this._emojize(this._escape(message)).replace(/\\n/g, '<br/>');\n    },\n    formatLog: function(log) {\n      return Travis.Log.filter(log);\n    },\n    pathFrom: function(url) {\n      return (url || '').split('/').pop();\n    },\n    timeAgoInWords: function(date) {\n      return $.timeago.distanceInWords(date);\n    },\n    durationFrom: function(started, finished) {\n      started = started && this._toUtc(new Date(this._normalizeDateString(started)));\n      finished = finished ? this._toUtc(new Date(this._normalizeDateString(finished))) : this._nowUtc();\n      if (started && finished) {\n        return Math.round((finished - started) / 1000);\n      } else {\n        return 0;\n      }\n    },\n    timeInWords: function(duration) {\n      var days, hours, minutes, result, seconds;\n      days = Math.floor(duration / 86400);\n      hours = Math.floor(duration % 86400 / 3600);\n      minutes = Math.floor(duration % 3600 / 60);\n      seconds = duration % 60;\n      if (days > 0) {\n        return 'more than 24 hrs';\n      } else {\n        result = [];\n        if (hours === 1) {\n          result.push(hours + ' hr');\n        }\n        if (hours > 1) {\n          result.push(hours + ' hrs');\n        }\n        if (minutes > 0) {\n          result.push(minutes + ' min');\n        }\n        if (seconds > 0) {\n          result.push(seconds + ' sec');\n        }\n        if (result.length > 0) {\n          return result.join(' ');\n        } else {\n          return '-';\n        }\n      }\n    },\n    _normalizeDateString: function(string) {\n      if (window.JHW) {\n        string = string.replace('T', ' ').replace(/-/g, '/');\n        string = string.replace('Z', '').replace(/\\..*$/, '');\n      }\n      return string;\n    },\n    _nowUtc: function() {\n      return this._toUtc(new Date());\n    },\n    _toUtc: function(date) {\n      return Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n    },\n    _emojize: function(text) {\n      var emojis;\n      emojis = text.match(/:\\S+?:/g);\n      if (emojis !== null) {\n        $.each(emojis.uniq(), function(ix, emoji) {\n          var image, strippedEmoji;\n          strippedEmoji = emoji.substring(1, emoji.length - 1);\n          if (EmojiDictionary.indexOf(strippedEmoji) !== -1) {\n            image = '<img class=\\'emoji\\' title=\\'' + emoji + '\\' alt=\\'' + emoji + '\\' src=\\'' + Travis.assets.host + '/' + Travis.assets.version + '/images/emoji/' + strippedEmoji + '.png\\'/>';\n            return text = text.replace(new RegExp(emoji, 'g'), image);\n          }\n        });\n      }\n      return text;\n    },\n    _escape: function(text) {\n      return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    }\n  };\n\n}).call(this);\n\n})();\n//@ sourceURL=helpers/helpers");minispade.register('helpers/urls', "(function() {(function() {\n\n  this.Travis.Urls = {\n    repository: function(slug) {\n      return \"#!/\" + slug;\n    },\n    builds: function(slug) {\n      return \"#!/\" + slug + \"/builds\";\n    },\n    build: function(slug, id) {\n      return \"#!/\" + slug + \"/builds/\" + id;\n    },\n    job: function(slug, id) {\n      return \"#!/\" + slug + \"/jobs/\" + id;\n    },\n    githubCommit: function(slug, sha) {\n      return \"http://github.com/\" + slug + \"/commit/\" + sha;\n    },\n    githubRepository: function(slug) {\n      return \"http://github.com/\" + slug;\n    },\n    githubWatchers: function(slug) {\n      return \"http://github.com/\" + slug + \"/watchers\";\n    },\n    githubNetwork: function(slug) {\n      return \"http://github.com/\" + slug + \"/network\";\n    },\n    email: function(email) {\n      return \"mailto:\" + email;\n    }\n  };\n\n}).call(this);\n\n})();\n//@ sourceURL=helpers/urls");minispade.register('layout', "(function() {(function() {\n\n  Travis.Layout = Em.Namespace.create();\nminispade.require('layout/home');\nminispade.require('layout/left');\nminispade.require('layout/sidebar');\nminispade.require('layout/profile');\nminispade.require('layout/stats');\n\n}).call(this);\n\n})();\n//@ sourceURL=layout");minispade.register('layout/base', "(function() {(function() {\n\n  Travis.Layout.Base = Em.Object.extend({\n    init: function() {\n      this.parent = this.get('parent');\n      this.setup(Array.prototype.slice.apply(arguments).concat([this.get('name'), 'top']));\n      return this.connect();\n    },\n    setup: function(controllers) {\n      var key, klass, name, _i, _len;\n      $.extend(this, Travis.Controllers);\n      $.extend(this, Travis.Views);\n      for (_i = 0, _len = controllers.length; _i < _len; _i++) {\n        name = controllers[_i];\n        key = \"\" + ($.camelize(name, false)) + \"Controller\";\n        name = $.camelize(key);\n        klass = Travis.Controllers[name] || Em.Controller;\n        this[key] = klass.create({\n          layout: this,\n          namespace: this,\n          controllers: this\n        });\n      }\n      this.controller = this[\"\" + ($.camelize(this.get('name'), false)) + \"Controller\"];\n      return this.viewClass = Travis.Views[\"\" + ($.camelize(this.get('name'))) + \"Layout\"];\n    },\n    connect: function() {\n      this.parent.connectOutlet({\n        outletName: 'layout',\n        controller: this.controller,\n        viewClass: this.viewClass\n      });\n      return this.connectTop();\n    },\n    connectTop: function() {\n      this.controller.connectOutlet({\n        outletName: 'top',\n        name: 'top'\n      });\n      return this.topController.set('tab', this.get('name'));\n    },\n    activate: function(action, params) {\n      this[\"view\" + ($.camelize(action))]();\n      return this.set('params', params);\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=layout/base");minispade.register('layout/home', "(function() {(function() {\nminispade.require('layout/base');\n\n  Travis.Layout.Home = Travis.Layout.Base.extend({\n    name: 'home',\n    bindings: [],\n    init: function() {\n      this._super('repositories', 'repository', 'tabs', 'builds', 'build', 'job');\n      this.controller.connectOutlet({\n        outletName: 'left',\n        name: 'repositories'\n      });\n      this.controller.connectOutlet({\n        outletName: 'main',\n        name: 'repository'\n      });\n      this.controller.connectOutlet({\n        outletName: 'tabs',\n        name: 'tabs'\n      });\n      return this.set('repositories', Travis.Repository.find());\n    },\n    activate: function(action, params) {\n      this._unbind();\n      this.set('tab', action === 'index' ? 'current' : action);\n      return this._super(action, params);\n    },\n    viewIndex: function() {\n      this._bind('repository', 'repositories.firstObject');\n      this._bind('build', 'repository.lastBuild');\n      return this.connectTab('build');\n    },\n    viewCurrent: function() {\n      this._bind('repository', 'repositoriesByParams.firstObject');\n      this._bind('build', 'repository.lastBuild');\n      return this.connectTab('build');\n    },\n    viewBuilds: function() {\n      this._bind('repository', 'repositoriesByParams.firstObject');\n      this._bind('builds', 'repository.builds');\n      return this.connectTab('builds');\n    },\n    viewBuild: function() {\n      this._bind('repository', 'repositoriesByParams.firstObject');\n      this._bind('build', 'buildById');\n      return this.connectTab('build');\n    },\n    viewJob: function() {\n      this._bind('repository', 'repositoriesByParams.firstObject');\n      this._bind('build', 'job.build');\n      this._bind('job', 'jobById');\n      return this.connectTab('job');\n    },\n    repositoriesByParams: (function() {\n      var params;\n      if (params = this.get('params')) {\n        return Travis.Repository.bySlug(\"\" + params.owner + \"/\" + params.name);\n      }\n    }).property('params'),\n    buildById: (function() {\n      var id;\n      if (id = this.getPath('params.id')) {\n        return Travis.Build.find(id);\n      }\n    }).property('params.id'),\n    jobById: (function() {\n      var id;\n      if (id = this.getPath('params.id')) {\n        return Travis.Job.find(id);\n      }\n    }).property('params.id'),\n    _bind: function(to, from) {\n      return this.bindings.push(Ember.oneWay(this, to, from));\n    },\n    _unbind: function() {\n      var binding, _i, _len, _ref;\n      _ref = this.bindings;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        binding = _ref[_i];\n        binding.disconnect(this);\n      }\n      return this.bindings.length = 0;\n    },\n    connectTab: function(tab) {\n      return this.controller.connectOutlet({\n        outletName: 'tab',\n        name: tab\n      });\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=layout/home");minispade.register('layout/left', "(function() {(function() {\nminispade.require('layout/base');\n\n  Travis.Layout.Left = Travis.Layout.Base.extend({\n    name: 'sidebar',\n    init: function() {\n      this._super('repositories');\n      this.parent = this.get('parent');\n      return this.connectLeft(Travis.Repository.find());\n    },\n    connect: function() {\n      return this.parent.connectOutlet({\n        outletName: 'right',\n        name: 'sidebar'\n      });\n    },\n    connectLeft: function(repositories) {\n      this.parent.set('repositories', repositories);\n      return this.parent.connectOutlet({\n        outletName: 'left',\n        name: 'repositories',\n        context: repositories\n      });\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=layout/left");minispade.register('layout/profile', "(function() {(function() {\nminispade.require('layout/base');\n\n  Travis.Layout.Profile = Travis.Layout.Base.extend({\n    name: 'profile',\n    init: function() {\n      return this._super('top', 'user', 'hooks');\n    },\n    viewShow: function(params) {\n      this.connectUser(this.currentUser);\n      return this.connectHooks(Travis.Hook.find());\n    },\n    connectUser: function(user) {\n      return this.profileController.connectOutlet({\n        outletName: 'main',\n        name: 'user',\n        context: user\n      });\n    },\n    connectHooks: function(hooks) {\n      if (hooks) {\n        return this.userController.connectOutlet({\n          outletName: 'hooks',\n          name: 'hooks',\n          context: hooks\n        });\n      }\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=layout/profile");minispade.register('layout/sidebar', "(function() {(function() {\nminispade.require('layout/base');\n\n  Travis.Layout.Sidebar = Travis.Layout.Base.extend({\n    name: 'sidebar',\n    init: function() {\n      this._super('sponsors', 'workers', 'queues');\n      this.parent = this.get('parent');\n      this.connectSponsors(Travis.Sponsor.decks(), Travis.Sponsor.links());\n      this.connectWorkers(Travis.Worker.find());\n      this.connectQueues(Travis.QUEUES);\n      return Travis.Ticker.create({\n        target: this,\n        interval: Travis.INTERVALS.sponsors\n      });\n    },\n    connect: function() {\n      return this.parent.connectOutlet({\n        outletName: 'right',\n        name: 'sidebar'\n      });\n    },\n    connectSponsors: function(decks, links) {\n      this.sponsorsController = Em.Controller.create({\n        decks: Travis.Controllers.SponsorsController.create({\n          perPage: 1,\n          content: decks\n        }),\n        links: Travis.Controllers.SponsorsController.create({\n          perPage: 6,\n          content: links\n        })\n      });\n      return this.parent.set('sponsors', this.sponsorsController);\n    },\n    tick: function() {\n      this.sponsorsController.get('decks').next();\n      return this.sponsorsController.get('links').next();\n    },\n    connectWorkers: function(workers) {\n      this.workersController.set('content', workers);\n      return this.parent.set('workers', this.workersController);\n    },\n    connectQueues: function(queues) {\n      var queue;\n      queues = (function() {\n        var _i, _len, _results;\n        _results = [];\n        for (_i = 0, _len = queues.length; _i < _len; _i++) {\n          queue = queues[_i];\n          _results.push(Em.ArrayController.create({\n            content: Travis.Job.queued(queue.name),\n            name: queue.display\n          }));\n        }\n        return _results;\n      })();\n      this.queuesController.set('content', queues);\n      return this.parent.set('queues', this.queuesController);\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=layout/sidebar");minispade.register('layout/stats', "(function() {(function() {\nminispade.require('layout/base');\n\n  Travis.Layout.Stats = Travis.Layout.Base.extend({\n    name: 'stats',\n    init: function() {\n      return this._super('top', 'stats', 'hooks');\n    },\n    viewShow: function(params) {\n      if (this.currentUser) {\n        return this.connectStats();\n      }\n    },\n    connectStats: function() {\n      return this.statsController.connectOutlet({\n        outletName: 'main',\n        name: 'stats'\n      });\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=layout/stats");minispade.register('models', "(function() {(function() {\nminispade.require('models/artifact');\nminispade.require('models/build');\nminispade.require('models/commit');\nminispade.require('models/hook');\nminispade.require('models/job');\nminispade.require('models/repository');\nminispade.require('models/sponsor');\nminispade.require('models/user');\nminispade.require('models/worker');\n\n}).call(this);\n\n})();\n//@ sourceURL=models");minispade.register('models/artifact', "(function() {(function() {\nminispade.require('travis/model');\n\n  this.Travis.Artifact = Travis.Model.extend({\n    body: DS.attr('string')\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=models/artifact");minispade.register('models/branch', "(function() {(function() {\nminispade.require('travis/model');\n\n  this.Travis.Branch = Travis.Model.extend(Travis.Helpers, {\n    repository_id: DS.attr('number'),\n    number: DS.attr('number'),\n    branch: DS.attr('string'),\n    message: DS.attr('string'),\n    result: DS.attr('number'),\n    duration: DS.attr('number'),\n    started_at: DS.attr('string'),\n    finished_at: DS.attr('string'),\n    commit: DS.belongsTo('Travis.Commit'),\n    repository: (function() {\n      if (this.get('repository_id')) {\n        return Travis.Repository.find(this.get('repository_id'));\n      }\n    }).property('repository_id').cacheable(),\n    tick: function() {\n      this.notifyPropertyChange('started_at');\n      return this.notifyPropertyChange('finished_at');\n    }\n  });\n\n  this.Travis.Branch.reopenClass({\n    byRepositoryId: function(id) {\n      return this.find({\n        repository_id: id\n      });\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=models/branch");minispade.register('models/build', "(function() {(function() {\nminispade.require('travis/model');\n\n  this.Travis.Build = Travis.Model.extend({\n    state: DS.attr('string'),\n    number: DS.attr('number'),\n    branch: DS.attr('string'),\n    message: DS.attr('string'),\n    result: DS.attr('number'),\n    duration: DS.attr('number'),\n    started_at: DS.attr('string'),\n    finished_at: DS.attr('string'),\n    committed_at: DS.attr('string'),\n    committer_name: DS.attr('string'),\n    committer_email: DS.attr('string'),\n    author_name: DS.attr('string'),\n    author_email: DS.attr('string'),\n    compare_url: DS.attr('string'),\n    repository: DS.belongsTo('Travis.Repository'),\n    commit: DS.belongsTo('Travis.Commit'),\n    config: (function() {\n      return this.getPath('data.config');\n    }).property('data.config'),\n    jobs: (function() {\n      return Travis.Job.findMany(this.getPath('data.job_ids') || []);\n    }).property('data.job_ids.length'),\n    isMatrix: (function() {\n      return this.getPath('data.job_ids.length') > 1;\n    }).property('data.job_ids.length'),\n    configKeys: (function() {\n      var config, headers, key, keys;\n      if (!(config = this.get('config'))) {\n        return [];\n      }\n      keys = $.intersect($.keys(config), Travis.CONFIG_KEYS);\n      headers = (function() {\n        var _i, _len, _ref, _results;\n        _ref = ['build.job', 'build.duration', 'build.finished_at'];\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          key = _ref[_i];\n          _results.push(I18n.t(key));\n        }\n        return _results;\n      })();\n      return $.map(headers.concat(keys), function(key) {\n        return $.camelize(key);\n      });\n    }).property('config'),\n    tick: function() {\n      this.notifyPropertyChange('duration');\n      return this.notifyPropertyChange('finished_at');\n    }\n  });\n\n  this.Travis.Build.reopenClass({\n    byRepositoryId: function(id, parameters) {\n      return this.find($.extend(parameters || {}, {\n        repository_id: id,\n        orderBy: 'number DESC'\n      }));\n    },\n    olderThanNumber: function(id, build_number) {\n      return this.find({\n        url: '/repositories/' + id + '/builds.json?bare=true&after_number=' + build_number,\n        repository_id: id,\n        orderBy: 'number DESC'\n      });\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=models/build");minispade.register('models/commit', "(function() {(function() {\nminispade.require('travis/model');\n\n  this.Travis.Commit = Travis.Model.extend({\n    sha: DS.attr('string'),\n    branch: DS.attr('string'),\n    message: DS.attr('string'),\n    compareUrl: DS.attr('string'),\n    authorName: DS.attr('string'),\n    authorEmail: DS.attr('string'),\n    committerName: DS.attr('string'),\n    committerEmail: DS.attr('string'),\n    build: DS.belongsTo('Travis.Build')\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=models/commit");minispade.register('models/hook', "(function() {(function() {\nminispade.require('travis/model');\n\n  this.Travis.Hook = Travis.Model.extend({\n    primaryKey: 'slug',\n    slug: DS.attr('string'),\n    description: DS.attr('string'),\n    active: DS.attr('boolean'),\n    owner: (function() {\n      return this.get('slug').split('/')[0];\n    }).property('slug'),\n    name: (function() {\n      return this.get('slug').split('/')[1];\n    }).property('slug'),\n    urlGithub: (function() {\n      return \"http://github.com/\" + (this.get('slug'));\n    }).property(),\n    urlGithubAdmin: (function() {\n      return \"http://github.com/\" + (this.get('slug')) + \"/admin/hooks#travis_minibucket\";\n    }).property(),\n    toggle: function() {\n      this.set('active', !this.get('active'));\n      return Travis.app.store.commit();\n    }\n  });\n\n  this.Travis.Hook.reopenClass({\n    url: 'profile/hooks'\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=models/hook");minispade.register('models/job', "(function() {(function() {\nminispade.require('travis/model');\n\n  this.Travis.Job = Travis.Model.extend({\n    repository_id: DS.attr('number'),\n    build_id: DS.attr('number'),\n    log_id: DS.attr('number'),\n    queue: DS.attr('string'),\n    state: DS.attr('string'),\n    number: DS.attr('string'),\n    result: DS.attr('number'),\n    duration: DS.attr('number'),\n    started_at: DS.attr('string'),\n    finished_at: DS.attr('string'),\n    allow_failure: DS.attr('boolean'),\n    repository: DS.belongsTo('Travis.Repository'),\n    commit: DS.belongsTo('Travis.Commit'),\n    build: DS.belongsTo('Travis.Build'),\n    log: DS.belongsTo('Travis.Artifact'),\n    config: (function() {\n      return this.getPath('data.config');\n    }).property('data.config'),\n    sponsor: (function() {\n      return this.getPath('data.sponsor');\n    }).property('data.sponsor'),\n    configValues: (function() {\n      var config;\n      config = this.get('config');\n      if (!config) {\n        return [];\n      }\n      return $.values($.only(config, 'rvm', 'gemfile', 'env', 'otp_release', 'php', 'node_js', 'scala', 'jdk', 'python', 'perl'));\n    }).property('config'),\n    appendLog: function(log) {\n      return this.set('log', this.get('log') + log);\n    },\n    subscribe: function() {\n      return Travis.app.subscribe('job-' + this.get('id'));\n    },\n    onStateChange: (function() {\n      if (this.get('state') === 'finished') {\n        return Travis.app.unsubscribe('job-' + this.get('id'));\n      }\n    }).observes('state'),\n    tick: function() {\n      this.notifyPropertyChange('duration');\n      return this.notifyPropertyChange('finished_at');\n    }\n  });\n\n  this.Travis.Job.reopenClass({\n    queued: function(queue) {\n      this.find();\n      return Travis.app.store.filter(this, function(job) {\n        return job.get('queue') === 'builds.' + queue;\n      });\n    },\n    findMany: function(ids) {\n      return Travis.app.store.findMany(this, ids);\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=models/job");minispade.register('models/repository', "(function() {(function() {\nminispade.require('travis/model');\n\n  this.Travis.Repository = Travis.Model.extend({\n    slug: DS.attr('string'),\n    owner: DS.attr('string'),\n    name: DS.attr('string'),\n    description: DS.attr('string'),\n    lastBuildId: DS.attr('number'),\n    lastBuildNumber: DS.attr('string'),\n    lastBuildResult: DS.attr('number'),\n    lastBuildStarted_at: DS.attr('string'),\n    lastBuildFinished_at: DS.attr('string'),\n    lastBuild: DS.belongsTo('Travis.Build'),\n    builds: (function() {\n      return Travis.Build.byRepositoryId(this.get('id'), {\n        event_type: 'push'\n      });\n    }).property(),\n    pullRequests: (function() {\n      return Travis.Build.byRepositoryId(this.get('id'), {\n        event_type: 'pull_request'\n      });\n    }).property(),\n    lastBuildDuration: (function() {\n      var duration;\n      duration = this.getPath('data.lastBuildDuration');\n      if (!duration) {\n        duration = Travis.Helpers.durationFrom(this.get('lastBuildStarted_at'), this.get('lastBuildFinished_at'));\n      }\n      return duration;\n    }).property('data.lastBuildDuration', 'lastBuildStartedAt', 'lastBuildFinishedAt'),\n    stats: (function() {}).property('slug'),\n    select: function() {\n      return Travis.Repository.select(self.get('id'));\n    },\n    tick: function() {\n      this.notifyPropertyChange('lastBuildDuration');\n      return this.notifyPropertyChange('lastBuildFinishedAt');\n    }\n  });\n\n  this.Travis.Repository.reopenClass({\n    recent: function() {\n      return this.find();\n    },\n    ownedBy: function(owner) {\n      return this.find({\n        owner: owner,\n        orderBy: 'name'\n      });\n    },\n    search: function(query) {\n      return this.find({\n        search: query,\n        orderBy: 'name'\n      });\n    },\n    bySlug: function(slug) {\n      var repo;\n      repo = $.detect(this.find().toArray(), function(repo) {\n        return repo.get('slug') === slug;\n      });\n      if (repo) {\n        return Ember.ArrayProxy.create({\n          content: [repo]\n        });\n      } else {\n        return this.find({\n          slug: slug\n        });\n      }\n    },\n    select: function(id) {\n      return this.find().forEach(function(repository) {\n        return repository.set('selected', repository.get('id') === id);\n      });\n    },\n    buildURL: function(slug) {\n      if (slug) {\n        return slug;\n      } else {\n        return 'repositories';\n      }\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=models/repository");minispade.register('models/sponsor', "(function() {(function() {\nminispade.require('travis/model');\n\n  this.Travis.Sponsor = Travis.Model.extend({\n    type: DS.attr('string'),\n    url: DS.attr('string'),\n    link: DS.attr('string'),\n    image: (function() {\n      return \"images/sponsors/\" + (this.getPath('data.image'));\n    }).property('data.image')\n  });\n\n  Travis.Sponsor.reopenClass({\n    decks: function() {\n      return this.platinum().concat(this.gold());\n    },\n    platinum: function() {\n      var platinum, sponsor, _i, _len, _results;\n      platinum = this.byType('platinum').toArray();\n      _results = [];\n      for (_i = 0, _len = platinum.length; _i < _len; _i++) {\n        sponsor = platinum[_i];\n        _results.push([sponsor]);\n      }\n      return _results;\n    },\n    gold: function() {\n      var gold, _results;\n      gold = this.byType('gold').toArray();\n      _results = [];\n      while (gold.length > 0) {\n        _results.push(gold.splice(0, 2));\n      }\n      return _results;\n    },\n    links: function() {\n      return this.byType('silver');\n    },\n    byType: function() {\n      var types;\n      types = Array.prototype.slice.apply(arguments);\n      return Travis.Sponsor.filter(function(sponsor) {\n        return types.indexOf(sponsor.get('type')) !== -1;\n      });\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=models/sponsor");minispade.register('models/user', "(function() {(function() {\nminispade.require('travis/model');\n\n  this.Travis.User = Travis.Model.extend({\n    name: DS.attr('string'),\n    email: DS.attr('string'),\n    login: DS.attr('string'),\n    token: DS.attr('string'),\n    gravatar: DS.attr('string'),\n    urlGithub: (function() {\n      return \"http://github.com/\" + (this.get('login'));\n    }).property()\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=models/user");minispade.register('models/worker', "(function() {(function() {\nminispade.require('travis/model');\n\n  this.Travis.Worker = Travis.Model.extend({\n    state: DS.attr('string'),\n    name: DS.attr('string'),\n    host: DS.attr('string'),\n    lastSeenAt: DS.attr('string'),\n    isTesting: (function() {\n      return this.get('state') === 'working' && !!this.getPath('payload.config');\n    }).property('state', 'config'),\n    number: (function() {\n      return this.get('name').match(/\\d+$/)[0];\n    }).property('name'),\n    display: (function() {\n      var name, number, payload, repo, state;\n      name = this.get('name').replace('travis-', '');\n      state = this.get('state');\n      payload = this.get('payload');\n      if (state === 'working' && payload !== void 0) {\n        repo = payload.repository ? $.truncate(payload.repository.slug, 18) : void 0;\n        number = payload.build && payload.build.number ? ' #' + payload.build.number : '';\n        state = repo ? repo + number : state;\n      }\n      return name + ': ' + state;\n    }).property('state'),\n    urlJob: (function() {\n      return \"#!/\" + (this.getPath('payload.repository.slug')) + \"/jobs/\" + (this.getPath('payload.build.id'));\n    }).property('payload')\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=models/worker");minispade.register('router', "(function() {(function() {\n\n  Travis.Router = Em.Object.extend({\n    ROUTES: {\n      '!/profile': ['profile', 'show'],\n      '!/stats': ['stats', 'show'],\n      '!/:owner/:name/jobs/:id/:line': ['home', 'job'],\n      '!/:owner/:name/jobs/:id': ['home', 'job'],\n      '!/:owner/:name/builds/:id': ['home', 'build'],\n      '!/:owner/:name/builds': ['home', 'builds'],\n      '!/:owner/:name/pull_requests': ['home', 'pullRequests'],\n      '!/:owner/:name/branch_summary': ['home', 'branches'],\n      '!/:owner/:name': ['home', 'current'],\n      '': ['home', 'index']\n    },\n    start: function() {\n      var route, target, _ref, _results;\n      if (!this.started) {\n        this.started = true;\n        _ref = this.ROUTES;\n        _results = [];\n        for (route in _ref) {\n          target = _ref[route];\n          _results.push(this.route(route, target[0], target[1]));\n        }\n        return _results;\n      }\n    },\n    route: function(route, layout, action) {\n      var _this = this;\n      return Em.routes.add(route, function(params) {\n        return _this.action(layout, action, params);\n      });\n    },\n    action: function(name, action, params) {\n      var layout;\n      layout = Travis.app.layout(name);\n      layout.activate(action, params);\n      return $('body').attr('id', name);\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=router");minispade.register('store', "(function() {(function() {\nminispade.require('store/rest_adapter');\n\n  Travis.Store = DS.Store.extend({\n    revision: 4,\n    adapter: Travis.RestAdapter.create()\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=store");minispade.register('store/fixture_adapter', "(function() {(function() {\n\n  this.Travis.FixtureAdapter = DS.Adapter.extend({\n    find: function(store, type, id) {\n      var fixtures;\n      fixtures = type.FIXTURES;\n      Ember.assert(\"Unable to find fixtures for model type \" + type.toString(), !!fixtures);\n      if (fixtures.hasLoaded) {\n        return;\n      }\n      return setTimeout((function() {\n        store.loadMany(type, fixtures);\n        return fixtures.hasLoaded = true;\n      }), 300);\n    },\n    findMany: function() {\n      return this.find.apply(this, arguments);\n    },\n    findAll: function(store, type) {\n      var fixtures, ids;\n      fixtures = type.FIXTURES;\n      Ember.assert(\"Unable to find fixtures for model type \" + type.toString(), !!fixtures);\n      ids = fixtures.map(function(item, index, self) {\n        return item.id;\n      });\n      return store.loadMany(type, ids, fixtures);\n    },\n    findQuery: function(store, type, params, array) {\n      var fixture, fixtures, hashes, key, matches, value;\n      fixtures = type.FIXTURES;\n      Ember.assert(\"Unable to find fixtures for model type \" + type.toString(), !!fixtures);\n      hashes = (function() {\n        var _i, _len, _results;\n        _results = [];\n        for (_i = 0, _len = fixtures.length; _i < _len; _i++) {\n          fixture = fixtures[_i];\n          matches = (function() {\n            var _results1;\n            _results1 = [];\n            for (key in params) {\n              value = params[key];\n              _results1.push(key === 'orderBy' || fixture[key] === value);\n            }\n            return _results1;\n          })();\n          if (matches.reduce(function(a, b) {\n            return a && b;\n          })) {\n            _results.push(fixture);\n          } else {\n            _results.push(null);\n          }\n        }\n        return _results;\n      })();\n      return array.load(hashes.compact());\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=store/fixture_adapter");minispade.register('store/rest_adapter', "(function() {(function() {\nminispade.require('models');\n\n  this.Travis.RestAdapter = DS.RESTAdapter.extend({\n    init: function() {\n      this._super();\n      return this.set('mappings', {\n        builds: Travis.Build,\n        commits: Travis.Commit,\n        jobs: Travis.Job\n      });\n    },\n    plurals: {\n      repository: 'repositories',\n      branch: 'branches'\n    },\n    find: function(store, type, id) {\n      var url;\n      url = '/' + type.buildURL(id);\n      return this.ajax(url, 'GET', {\n        success: function(json) {\n          var root;\n          root = type.singularName();\n          this.sideload(store, type, json, root);\n          return store.load(type, json[root]);\n        },\n        accepts: {\n          json: 'application/vnd.travis-ci.2+json'\n        }\n      });\n    },\n    findMany: function(store, type, ids) {\n      var url;\n      url = '/' + type.buildURL();\n      return this.ajax(url, 'GET', {\n        data: {\n          ids: ids\n        },\n        success: function(json) {\n          var root;\n          root = type.pluralName();\n          this.sideload(store, type, json, root);\n          return store.loadMany(type, json[root]);\n        },\n        accepts: {\n          json: 'application/vnd.travis-ci.2+json'\n        }\n      });\n    },\n    findAll: function(store, type) {\n      var url;\n      url = '/' + type.buildURL();\n      return this.ajax(url, 'GET', {\n        success: function(json) {\n          var root;\n          root = type.pluralName();\n          this.sideload(store, type, json, root);\n          return store.loadMany(type, json[root]);\n        },\n        accepts: {\n          json: 'application/vnd.travis-ci.2+json'\n        }\n      });\n    },\n    findQuery: function(store, type, query, recordArray) {\n      var url;\n      url = '/' + type.buildURL();\n      return this.ajax(url, 'GET', {\n        data: query,\n        success: function(json) {\n          var root;\n          root = type.pluralName();\n          this.sideload(store, type, json, root);\n          return recordArray.load(json[root]);\n        },\n        accepts: {\n          json: 'application/vnd.travis-ci.2+json'\n        }\n      });\n    },\n    updateRecord: function(store, type, record) {\n      var data, id, url;\n      id = get(record, record.get('primaryKey') || 'id');\n      url = '/' + type.buildURL(id);\n      data = {\n        root: record.toJSON()\n      };\n      return this.ajax(url, 'PUT', {\n        data: data,\n        success: function(json) {\n          var root;\n          root = type.singularName();\n          this.sideload(store, type, json, root);\n          return store.didUpdateRecord(record, json && json[root]);\n        }\n      });\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=store/rest_adapter");minispade.register('views', "(function() {(function() {\nminispade.require('ext/ember/namespace');\n\n  this.Travis.Views = Em.Namespace.create({\n    HomeLayout: Em.View.extend({\n      templateName: 'layouts/home'\n    }),\n    ProfileLayout: Em.View.extend({\n      templateName: 'layouts/simple'\n    }),\n    StatsLayout: Em.View.extend({\n      templateName: 'layouts/simple'\n    }),\n    StatsView: Em.View.extend({\n      templateName: 'stats/show'\n    }),\n    SidebarView: Em.View.extend({\n      templateName: 'layouts/sidebar',\n      toggleSidebar: function() {\n        var element;\n        $('body').toggleClass('maximized');\n        element = $('<span></span>');\n        $('#repository').append(element);\n        return Em.run.later((function() {\n          return element.remove();\n        }), 10);\n      }\n    })\n  });\nminispade.require('views/build');\nminispade.require('views/job');\nminispade.require('views/repo');\nminispade.require('views/profile');\nminispade.require('views/tabs');\nminispade.require('views/top');\n\n}).call(this);\n\n})();\n//@ sourceURL=views");minispade.register('views/build', "(function() {(function() {\n\n  this.Travis.Views.reopen({\n    BuildsView: Em.View.extend({\n      templateName: 'builds/list',\n      buildsBinding: 'controller'\n    }),\n    BuildsItemView: Em.View.extend({\n      repositoryBinding: 'controller.repository',\n      buildBinding: 'context',\n      commitBinding: 'build.commit',\n      color: (function() {\n        return Travis.Helpers.colorForResult(this.getPath('context.result'));\n      }).property('build.result'),\n      urlBuild: (function() {\n        return Travis.Urls.build(this.getPath('repository.slug'), this.getPath('build.id'));\n      }).property('repository.slug', 'build.id'),\n      urlGithubCommit: (function() {\n        return Travis.Urls.githubCommit(this.getPath('repository.slug'), this.getPath('commit.sha'));\n      }).property('repository.slug', 'commit.sha')\n    }),\n    BuildView: Em.View.extend({\n      templateName: 'builds/show',\n      repositoryBinding: 'controller.repository',\n      buildBinding: 'controller.build',\n      commitBinding: 'build.commit',\n      color: (function() {\n        return Travis.Helpers.colorForResult(this.getPath('build.result'));\n      }).property('build.result'),\n      urlBuild: (function() {\n        return Travis.Urls.build(this.getPath('repository.slug'), this.getPath('build.id'));\n      }).property('repository.slug', 'build.id'),\n      urlGithubCommit: (function() {\n        return Travis.Urls.githubCommit(this.getPath('repository.slug'), this.getPath('commit.sha'));\n      }).property('repository.slug', 'commit.sha'),\n      urlAuthor: (function() {\n        return Travis.Urls.email(this.getPath('commit.authorEmail'));\n      }).property('commit.authorEmail'),\n      urlCommitter: (function() {\n        return Travis.Urls.email(this.getPath('commit.committerEmail'));\n      }).property('commit.committerEmail'),\n      requiredJobs: (function() {\n        var jobs;\n        jobs = this.getPath('build.jobs');\n        if (jobs) {\n          return jobs.filter(function(job) {\n            return job.get('allow_failure') !== true;\n          });\n        }\n      }).property('build.jobs'),\n      allowedFailureJobs: (function() {\n        var jobs;\n        jobs = this.getPath('build.jobs');\n        if (jobs) {\n          return jobs.filter(function(job) {\n            return job.get('allow_failure');\n          });\n        }\n      }).property('build.jobs')\n    })\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=views/build");minispade.register('views/job', "(function() {(function() {\n\n  this.Travis.Views.reopen({\n    JobsView: Em.View.extend({\n      templateName: 'jobs/list',\n      toggleHelp: function() {\n        return $.facebox({\n          div: '#allow_failure_help'\n        });\n      }\n    }),\n    JobsItemView: Em.View.extend({\n      repositoryBinding: 'context.repository',\n      jobBinding: 'context',\n      color: (function() {\n        return Travis.Helpers.colorForResult(this.getPath('job.result'));\n      }).property('job.result'),\n      urlJob: (function() {\n        return Travis.Urls.job(this.getPath('repository.slug'), this.getPath('job.id'));\n      }).property('repository.slug', 'job.id')\n    }),\n    JobView: Em.View.extend({\n      templateName: 'jobs/show',\n      repositoryBinding: 'controller.repository',\n      jobBinding: 'controller.job',\n      commitBinding: 'job.commit',\n      color: (function() {\n        return Travis.Helpers.colorForResult(this.getPath('job.result'));\n      }).property('job.result'),\n      urlJob: (function() {\n        return Travis.Urls.job(this.getPath('repository.slug'), this.getPath('job.id'));\n      }).property('repository.slug', 'job.id'),\n      urlGithubCommit: (function() {\n        return Travis.Urls.githubCommit(this.getPath('repository.slug'), this.getPath('commit.sha'));\n      }).property('repository.slug', 'commit.sha'),\n      urlAuthor: (function() {\n        return Travis.Urls.email(this.getPath('commit.authorEmail'));\n      }).property('commit.authorEmail'),\n      urlCommitter: (function() {\n        return Travis.Urls.email(this.getPath('commit.committerEmail'));\n      }).property('commit.committerEmail')\n    }),\n    LogView: Em.View.extend({\n      templateName: 'jobs/log'\n    })\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=views/job");minispade.register('views/profile', "(function() {(function() {\n\n  this.Travis.Views.reopen({\n    UserView: Em.View.extend({\n      templateName: 'profile/show'\n    }),\n    HooksView: Em.View.extend({\n      templateName: 'profile/hooks'\n    })\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=views/profile");minispade.register('views/repo', "(function() {(function() {\n\n  this.Travis.Views.reopen({\n    RepositoriesView: Em.View.extend({\n      templateName: 'repositories/list'\n    }),\n    RepositoriesItemView: Em.View.extend({\n      repositoryBinding: 'context',\n      classes: (function() {\n        return $.compact(['repository', this.get('color'), this.get('selected')]).join(' ');\n      }).property('color', 'selected'),\n      color: (function() {\n        return Travis.Helpers.colorForResult(this.getPath('repository.lastBuildResult'));\n      }).property('repository.lastBuildResult'),\n      selected: (function() {\n        if (this.getPath('repository.selected')) {\n          return 'selected';\n        }\n      }).property('repository.selected'),\n      urlRepository: (function() {\n        return Travis.Urls.repository(this.getPath('repository.slug'));\n      }).property('repository.slug'),\n      urlLastBuild: (function() {\n        return Travis.Urls.build(this.getPath('repository.slug'), this.getPath('repository.lastBuildId'));\n      }).property('repository.slug', 'repository.lastBuildId')\n    }),\n    RepositoryView: Em.View.extend({\n      templateName: 'repositories/show',\n      repositoryBinding: 'controller.repository',\n      urlGithub: (function() {\n        return Travis.Urls.githubRepository(this.getPath('repository.slug'));\n      }).property('repository.slug'),\n      urlGithubWatchers: (function() {\n        return Travis.Urls.githubWatchers(this.getPath('repository.slug'));\n      }).property('repository.slug'),\n      urlGithubNetwork: (function() {\n        return Travis.Urls.githubNetwork(this.getPath('repository.slug'));\n      }).property('repository.slug')\n    })\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=views/repo");minispade.register('views/tabs', "(function() {(function() {\n\n  this.Travis.Views.reopen({\n    TabsView: Em.View.extend({\n      templateName: 'repositories/tabs',\n      repositoryBinding: 'controller.repository',\n      buildBinding: 'controller.build',\n      jobBinding: 'controller.job',\n      tabBinding: 'controller.tab',\n      toggleTools: function() {\n        return $('#tools .pane').toggle();\n      },\n      isBuildTab: (function() {\n        var tab;\n        tab = this.getPath('tab');\n        return (tab === 'build' || tab === 'job') && this.getPath('build.isLoaded');\n      }).property('tab', 'build.isLoaded'),\n      isJobTab: (function() {\n        return this.getPath('tab') === 'job' && this.getPath('job.isLoaded');\n      }).property('tab', 'job.isLoaded'),\n      classCurrent: (function() {\n        if (this.getPath('tab') === 'current') {\n          return 'active';\n        }\n      }).property('tab'),\n      classBuilds: (function() {\n        if (this.getPath('tab') === 'builds') {\n          return 'active';\n        }\n      }).property('tab'),\n      classBuild: (function() {\n        if (this.getPath('tab') === 'build') {\n          return 'active';\n        }\n      }).property('tab'),\n      classJob: (function() {\n        if (this.getPath('tab') === 'job') {\n          return 'active';\n        }\n      }).property('tab'),\n      urlRepository: (function() {\n        return Travis.Urls.repository(this.getPath('repository.slug'));\n      }).property('repository.slug'),\n      urlBuilds: (function() {\n        return Travis.Urls.builds(this.getPath('repository.slug'));\n      }).property('repository.slug'),\n      urlBuild: (function() {\n        return Travis.Urls.build(this.getPath('repository.slug'), this.getPath('build.id'));\n      }).property('repository.slug', 'build.id'),\n      urlJob: (function() {\n        return Travis.Urls.job(this.getPath('repository.slug'), this.getPath('job.id'));\n      }).property('repository.slug', 'job.id')\n    })\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=views/tabs");minispade.register('views/top', "(function() {(function() {\n\n  this.Travis.Views.reopen({\n    TopView: Em.View.extend({\n      templateName: 'layouts/top',\n      tabBinding: 'controller.tab',\n      userBinding: 'controller.user',\n      gravatarUrl: (function() {\n        return \"http://www.gravatar.com/avatar/\" + (this.getPath('user.gravatar')) + \"?s=24&d=mm\";\n      }).property('user.gravatar'),\n      classHome: (function() {\n        if (this.get('tab') === 'home') {\n          return 'active';\n        }\n      }).property('tab'),\n      classStats: (function() {\n        if (this.getPath('tab') === 'stats') {\n          return 'active';\n        }\n      }).property('tab'),\n      classProfile: (function() {\n        if (this.getPath('tab') === 'profile') {\n          return 'profile active';\n        } else {\n          return 'profile';\n        }\n      }).property('tab'),\n      showProfile: function() {\n        return $('#top .profile ul').show();\n      },\n      hideProfile: function() {\n        return $('#top .profile ul').hide();\n      }\n    })\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=views/top");minispade.register('data/sponsors', "(function() {(function() {\n\n  this.Travis.SPONSORS = [\n    {\n      type: 'platinum',\n      url: \"http://www.wooga.com\",\n      image: \"wooga-205x130.png\"\n    }, {\n      type: 'platinum',\n      url: \"http://bendyworks.com\",\n      image: \"bendyworks-205x130.png\"\n    }, {\n      type: 'platinum',\n      url: \"http://cloudcontrol.com\",\n      image: \"cloudcontrol-205x130.png\"\n    }, {\n      type: 'platinum',\n      url: \"http://xing.de\",\n      image: \"xing-205x130.png\"\n    }, {\n      type: 'gold',\n      url: \"http://heroku.com\",\n      image: \"heroku-205x60.png\"\n    }, {\n      type: 'gold',\n      url: \"http://soundcloud.com\",\n      image: \"soundcloud-205x60.png\"\n    }, {\n      type: 'gold',\n      url: \"http://nedap.com\",\n      image: \"nedap-205x60.png\"\n    }, {\n      type: 'gold',\n      url: \"http://mongohq.com\",\n      image: \"mongohq-205x60.png\"\n    }, {\n      type: 'gold',\n      url: \"http://zweitag.de\",\n      image: \"zweitag-205x60.png\"\n    }, {\n      type: 'gold',\n      url: \"http://kanbanery.com\",\n      image: \"kanbanery-205x60.png\"\n    }, {\n      type: 'gold',\n      url: \"http://ticketevolution.com\",\n      image: \"ticketevolution-205x60.jpg\"\n    }, {\n      type: 'gold',\n      url: \"http://plan.io/travis\",\n      image: \"planio-205x60.png\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://cobot.me\\\">Cobot</a><span>: The one tool to run your coworking space</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://jumpstartlab.com\\\">JumpstartLab</a><span>: We build developers</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://evilmartians.com\\\">Evil Martians</a><span>: Agile Ruby on Rails development</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://zendesk.com\\\">Zendesk</a><span>: Love your helpdesk</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://stripe.com\\\">Stripe</a><span>: Payments for developers</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://basho.com\\\">Basho</a><span>: We make Riak!</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://thinkrelevance.com\\\">Relevance</a><span>: We deliver software solutions</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://mindmatters.de\\\">Mindmatters</a><span>: Software für Menschen</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://amenhq.com\\\">Amen</a><span>: The best and worst of everything</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://site5.com\\\">Site5</a><span>: Premium Web Hosting Solutions</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://www.crowdint.com\\\">Crowd Interactive</a><span>: Leading Rails consultancy in Mexico</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://www.atomicobject.com/detroit\\\">Atomic Object</a><span>: Work with really smart people</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://codeminer.com.br\\\">Codeminer</a><span>: smart services for your startup</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://cloudant.com\\\">Cloudant</a><span>: grow into your data layer, not out of it</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://gidsy.com\\\">Gidsy</a><span>: Explore, organize &amp; book unique things to do!</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://5apps.com\\\">5apps</a><span>: Package &amp; deploy HTML5 apps automatically</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://meltmedia.com\\\">Meltmedia</a><span>: We are Interactive Superheroes</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://www.fngtps.com\\\">Fingertips</a><span> offers design and development services</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://www.engineyard.com\\\">Engine Yard</a><span>: Build epic apps, let us handle the rest</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://malwarebytes.org\\\">Malwarebytes</a><span>: Defeat Malware once and for all.</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://readmill.com\\\">Readmill</a><span>: The best reading app on the iPad.</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://www.mdsol.com\\\">Medidata</a><span>: clinical tech improving quality of life</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://coderwall.com/teams/4f27194e973bf000040005f0\\\">ESM</a><span>: Japan's best agile Ruby/Rails consultancy</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://twitter.com\\\">Twitter</a><span>: instantly connects people everywhere</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://agileanimal.com\\\">AGiLE ANiMAL</a><span>: we <3 Travis CI.</span>\"\n    }, {\n      type: 'silver',\n      link: \"<a href=\\\"http://tupalo.com\\\">Tupalo</a><span>: Discover, review &amp; share local businesses.</span>\"\n    }\n  ];\n\n}).call(this);\n\n})();\n//@ sourceURL=data/sponsors");minispade.register('emoij', "(function() {(function() {\n\n  this.EmojiDictionary = ['-1', '0', '1', '109', '2', '3', '4', '5', '6', '7', '8', '8ball', '9', 'a', 'ab', 'airplane', 'alien', 'ambulance', 'angel', 'anger', 'angry', 'apple', 'aquarius', 'aries', 'arrow_backward', 'arrow_down', 'arrow_forward', 'arrow_left', 'arrow_lower_left', 'arrow_lower_right', 'arrow_right', 'arrow_up', 'arrow_upper_left', 'arrow_upper_right', 'art', 'astonished', 'atm', 'b', 'baby', 'baby_chick', 'baby_symbol', 'balloon', 'bamboo', 'bank', 'barber', 'baseball', 'basketball', 'bath', 'bear', 'beer', 'beers', 'beginner', 'bell', 'bento', 'bike', 'bikini', 'bird', 'birthday', 'black_square', 'blue_car', 'blue_heart', 'blush', 'boar', 'boat', 'bomb', 'book', 'boot', 'bouquet', 'bow', 'bowtie', 'boy', 'bread', 'briefcase', 'broken_heart', 'bug', 'bulb', 'bullettrain_front', 'bullettrain_side', 'bus', 'busstop', 'cactus', 'cake', 'calling', 'camel', 'camera', 'cancer', 'capricorn', 'car', 'cat', 'cd', 'chart', 'checkered_flag', 'cherry_blossom', 'chicken', 'christmas_tree', 'church', 'cinema', 'city_sunrise', 'city_sunset', 'clap', 'clapper', 'clock1', 'clock10', 'clock11', 'clock12', 'clock2', 'clock3', 'clock4', 'clock5', 'clock6', 'clock7', 'clock8', 'clock9', 'closed_umbrella', 'cloud', 'clubs', 'cn', 'cocktail', 'coffee', 'cold_sweat', 'computer', 'confounded', 'congratulations', 'construction', 'construction_worker', 'convenience_store', 'cool', 'cop', 'copyright', 'couple', 'couple_with_heart', 'couplekiss', 'cow', 'crossed_flags', 'crown', 'cry', 'cupid', 'currency_exchange', 'curry', 'cyclone', 'dancer', 'dancers', 'dango', 'dart', 'dash', 'de', 'department_store', 'diamonds', 'disappointed', 'dog', 'dolls', 'dolphin', 'dress', 'dvd', 'ear', 'ear_of_rice', 'egg', 'eggplant', 'egplant', 'eight_pointed_black_star', 'eight_spoked_asterisk', 'elephant', 'email', 'es', 'european_castle', 'exclamation', 'eyes', 'factory', 'fallen_leaf', 'fast_forward', 'fax', 'fearful', 'feelsgood', 'feet', 'ferris_wheel', 'finnadie', 'fire', 'fire_engine', 'fireworks', 'fish', 'fist', 'flags', 'flushed', 'football', 'fork_and_knife', 'fountain', 'four_leaf_clover', 'fr', 'fries', 'frog', 'fuelpump', 'gb', 'gem', 'gemini', 'ghost', 'gift', 'gift_heart', 'girl', 'goberserk', 'godmode', 'golf', 'green_heart', 'grey_exclamation', 'grey_question', 'grin', 'guardsman', 'guitar', 'gun', 'haircut', 'hamburger', 'hammer', 'hamster', 'hand', 'handbag', 'hankey', 'hash', 'headphones', 'heart', 'heart_decoration', 'heart_eyes', 'heartbeat', 'heartpulse', 'hearts', 'hibiscus', 'high_heel', 'horse', 'hospital', 'hotel', 'hotsprings', 'house', 'hurtrealbad', 'icecream', 'id', 'ideograph_advantage', 'imp', 'information_desk_person', 'iphone', 'it', 'jack_o_lantern', 'japanese_castle', 'joy', 'jp', 'key', 'kimono', 'kiss', 'kissing_face', 'kissing_heart', 'koala', 'koko', 'kr', 'leaves', 'leo', 'libra', 'lips', 'lipstick', 'lock', 'loop', 'loudspeaker', 'love_hotel', 'mag', 'mahjong', 'mailbox', 'man', 'man_with_gua_pi_mao', 'man_with_turban', 'maple_leaf', 'mask', 'massage', 'mega', 'memo', 'mens', 'metal', 'metro', 'microphone', 'minidisc', 'mobile_phone_off', 'moneybag', 'monkey', 'monkey_face', 'moon', 'mortar_board', 'mount_fuji', 'mouse', 'movie_camera', 'muscle', 'musical_note', 'nail_care', 'necktie', 'new', 'no_good', 'no_smoking', 'nose', 'notes', 'o', 'o2', 'ocean', 'octocat', 'octopus', 'oden', 'office', 'ok', 'ok_hand', 'ok_woman', 'older_man', 'older_woman', 'open_hands', 'ophiuchus', 'palm_tree', 'parking', 'part_alternation_mark', 'pencil', 'penguin', 'pensive', 'persevere', 'person_with_blond_hair', 'phone', 'pig', 'pill', 'pisces', 'plus1', 'point_down', 'point_left', 'point_right', 'point_up', 'point_up_2', 'police_car', 'poop', 'post_office', 'postbox', 'pray', 'princess', 'punch', 'purple_heart', 'question', 'rabbit', 'racehorse', 'radio', 'rage', 'rage1', 'rage2', 'rage3', 'rage4', 'rainbow', 'raised_hands', 'ramen', 'red_car', 'red_circle', 'registered', 'relaxed', 'relieved', 'restroom', 'rewind', 'ribbon', 'rice', 'rice_ball', 'rice_cracker', 'rice_scene', 'ring', 'rocket', 'roller_coaster', 'rose', 'ru', 'runner', 'sa', 'sagittarius', 'sailboat', 'sake', 'sandal', 'santa', 'satellite', 'satisfied', 'saxophone', 'school', 'school_satchel', 'scissors', 'scorpius', 'scream', 'seat', 'secret', 'shaved_ice', 'sheep', 'shell', 'ship', 'shipit', 'shirt', 'shit', 'shoe', 'signal_strength', 'six_pointed_star', 'ski', 'skull', 'sleepy', 'slot_machine', 'smile', 'smiley', 'smirk', 'smoking', 'snake', 'snowman', 'sob', 'soccer', 'space_invader', 'spades', 'spaghetti', 'sparkler', 'sparkles', 'speaker', 'speedboat', 'squirrel', 'star', 'star2', 'stars', 'station', 'statue_of_liberty', 'stew', 'strawberry', 'sunflower', 'sunny', 'sunrise', 'sunrise_over_mountains', 'surfer', 'sushi', 'suspect', 'sweat', 'sweat_drops', 'swimmer', 'syringe', 'tada', 'tangerine', 'taurus', 'taxi', 'tea', 'telephone', 'tennis', 'tent', 'thumbsdown', 'thumbsup', 'ticket', 'tiger', 'tm', 'toilet', 'tokyo_tower', 'tomato', 'tongue', 'top', 'tophat', 'traffic_light', 'train', 'trident', 'trophy', 'tropical_fish', 'truck', 'trumpet', 'tshirt', 'tulip', 'tv', 'u5272', 'u55b6', 'u6307', 'u6708', 'u6709', 'u6e80', 'u7121', 'u7533', 'u7a7a', 'umbrella', 'unamused', 'underage', 'unlock', 'up', 'us', 'v', 'vhs', 'vibration_mode', 'virgo', 'vs', 'walking', 'warning', 'watermelon', 'wave', 'wc', 'wedding', 'whale', 'wheelchair', 'white_square', 'wind_chime', 'wink', 'wink2', 'wolf', 'woman', 'womans_hat', 'womens', 'x', 'yellow_heart', 'zap', 'zzz'];\n\n}).call(this);\n\n})();\n//@ sourceURL=emoij");minispade.register('ext/jquery', "(function() {(function() {\n\n  $.fn.extend({\n    outerHtml: function() {\n      return $(this).wrap('<div></div>').parent().html();\n    },\n    outerElement: function() {\n      return $($(this).outerHtml()).empty();\n    },\n    flash: function() {\n      return Utils.flash(this);\n    },\n    unflash: function() {\n      return Utils.unflash(this);\n    },\n    filterLog: function() {\n      this.deansi();\n      return this.foldLog();\n    },\n    deansi: function() {\n      return this.html(Utils.deansi(this.html()));\n    },\n    foldLog: function() {\n      return this.html(Utils.foldLog(this.html()));\n    },\n    unfoldLog: function() {\n      return this.html(Utils.unfoldLog(this.html()));\n    },\n    updateTimes: function() {\n      return Utils.updateTimes(this);\n    },\n    activateTab: function(tab) {\n      return Utils.activateTab(this, tab);\n    },\n    timeInWords: function() {\n      return $(this).each(function() {\n        return $(this).text(Utils.timeInWords(parseInt($(this).attr('title'))));\n      });\n    },\n    updateGithubStats: function(repository) {\n      return Utils.updateGithubStats(repository, $(this));\n    }\n  });\n\n  $.extend({\n    keys: function(obj) {\n      var keys;\n      keys = [];\n      $.each(obj, function(key) {\n        return keys.push(key);\n      });\n      return keys;\n    },\n    values: function(obj) {\n      var values;\n      values = [];\n      $.each(obj, function(key, value) {\n        return values.push(value);\n      });\n      return values;\n    },\n    underscore: function(string) {\n      return string[0].toLowerCase() + string.substring(1).replace(/([A-Z])?/g, function(match, chr) {\n        if (chr) {\n          return \"_\" + (chr.toUpperCase());\n        } else {\n          return '';\n        }\n      });\n    },\n    camelize: function(string, uppercase) {\n      string = uppercase === false ? $.underscore(string) : $.capitalize(string);\n      return string.replace(/_(.)?/g, function(match, chr) {\n        if (chr) {\n          return chr.toUpperCase();\n        } else {\n          return '';\n        }\n      });\n    },\n    capitalize: function(string) {\n      return string[0].toUpperCase() + string.substring(1);\n    },\n    compact: function(array) {\n      return $.grep(array, function(value) {\n        return !!value;\n      });\n    },\n    all: function(array, callback) {\n      var args, i;\n      args = Array.prototype.slice.apply(arguments);\n      callback = args.pop();\n      array = args.pop() || this;\n      i = 0;\n      while (i < array.length) {\n        if (callback(array[i])) {\n          return false;\n        }\n        i++;\n      }\n      return true;\n    },\n    detect: function(array, callback) {\n      var args, i;\n      args = Array.prototype.slice.apply(arguments);\n      callback = args.pop();\n      array = args.pop() || this;\n      i = 0;\n      while (i < array.length) {\n        if (callback(array[i])) {\n          return array[i];\n        }\n        i++;\n      }\n    },\n    select: function(array, callback) {\n      var args, i, result;\n      args = Array.prototype.slice.apply(arguments);\n      callback = args.pop();\n      array = args.pop() || this;\n      result = [];\n      i = 0;\n      while (i < array.length) {\n        if (callback(array[i])) {\n          result.push(array[i]);\n        }\n        i++;\n      }\n      return result;\n    },\n    slice: function(object, key) {\n      var keys, result;\n      keys = Array.prototype.slice.apply(arguments);\n      object = (typeof keys[0] === 'object' ? keys.shift() : this);\n      result = {};\n      for (key in object) {\n        if (keys.indexOf(key) > -1) {\n          result[key] = object[key];\n        }\n      }\n      return result;\n    },\n    only: function(object) {\n      var key, keys, result;\n      keys = Array.prototype.slice.apply(arguments);\n      object = (typeof keys[0] === 'object' ? keys.shift() : this);\n      result = {};\n      for (key in object) {\n        if (keys.indexOf(key) !== -1) {\n          result[key] = object[key];\n        }\n      }\n      return result;\n    },\n    except: function(object) {\n      var key, keys, result;\n      keys = Array.prototype.slice.apply(arguments);\n      object = (typeof keys[0] === 'object' ? keys.shift() : this);\n      result = {};\n      for (key in object) {\n        if (keys.indexOf(key) === -1) {\n          result[key] = object[key];\n        }\n      }\n      return result;\n    },\n    intersect: function(array, other) {\n      return array.filter(function(element) {\n        return other.indexOf(element) !== -1;\n      });\n    },\n    map: function(elems, callback, arg) {\n      var i, isArray, key, length, ret, value;\n      value = void 0;\n      key = void 0;\n      ret = [];\n      i = 0;\n      length = elems.length;\n      isArray = elems instanceof jQuery || length !== void 0 && typeof length === 'number' && (length > 0 && elems[0] && elems[length - 1]) || length === 0 || jQuery.isArray(elems);\n      if (isArray) {\n        while (i < length) {\n          value = callback(elems[i], i, arg);\n          if (value != null) {\n            ret[ret.length] = value;\n          }\n          i++;\n        }\n      } else {\n        for (key in elems) {\n          value = callback(elems[key], key, arg);\n          if (value != null) {\n            ret[ret.length] = value;\n          }\n        }\n      }\n      return ret.concat.apply([], ret);\n    },\n    shuffle: function(array) {\n      var current, tmp, top;\n      array = array.slice();\n      top = array.length;\n      while (top && --top) {\n        current = Math.floor(Math.random() * (top + 1));\n        tmp = array[current];\n        array[current] = array[top];\n        array[top] = tmp;\n      }\n      return array;\n    },\n    truncate: function(string, length) {\n      if (string.length > length) {\n        return string.trim().substring(0, length) + '...';\n      } else {\n        return string;\n      }\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=ext/jquery");minispade.register('hax0rs', "(function() {(function() {\n\n  window.onTrue = function(object, path, callback) {\n    var observer;\n    if (object.getPath(path)) {\n      return callback();\n    } else {\n      observer = function() {\n        object.removeObserver(path, observer);\n        return callback();\n      };\n      return object.addObserver(path, observer);\n    }\n  };\n\n  window.onceLoaded = function() {\n    var callback, object, objects, path;\n    objects = Array.prototype.slice.apply(arguments);\n    callback = objects.pop();\n    objects = ((function() {\n      var _i, _len, _results;\n      _results = [];\n      for (_i = 0, _len = objects.length; _i < _len; _i++) {\n        object = objects[_i];\n        _results.push(object || null);\n      }\n      return _results;\n    })()).compact();\n    object = objects.shift();\n    if (object) {\n      path = Ember.isArray(object) ? 'firstObject.isLoaded' : 'isLoaded';\n      return onTrue(object, path, function() {\n        if (objects.length === 0) {\n          return callback(object);\n        } else {\n          return onceLoaded.apply(objects + [callback]);\n        }\n      });\n    } else {\n      return callback(object);\n    }\n  };\n\n}).call(this);\n\n})();\n//@ sourceURL=hax0rs");minispade.register('mocks', "(function() {(function() {\n  var artifact, artifacts, build, builds, commits, hooks, id, job, jobs, repositories, repository, responseTime, workers, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m;\nminispade.require('ext/jquery');\n\n  responseTime = 0;\n\n  repositories = [\n    {\n      id: 1,\n      owner: 'travis-ci',\n      name: 'travis-core',\n      slug: 'travis-ci/travis-core',\n      build_ids: [1, 2],\n      last_build_id: 1,\n      last_build_number: 1,\n      last_build_result: 0,\n      description: 'Description of travis-core'\n    }, {\n      id: 2,\n      owner: 'travis-ci',\n      name: 'travis-assets',\n      slug: 'travis-ci/travis-assets',\n      build_ids: [3],\n      last_build_id: 3,\n      last_build_number: 3,\n      last_build_result: 1,\n      description: 'Description of travis-assets'\n    }, {\n      id: 3,\n      owner: 'travis-ci',\n      name: 'travis-hub',\n      slug: 'travis-ci/travis-hub',\n      build_ids: [4],\n      last_build_id: 4,\n      last_build_number: 4,\n      description: 'Description of travis-hub'\n    }\n  ];\n\n  builds = [\n    {\n      id: 1,\n      repository_id: '1',\n      commit_id: 1,\n      job_ids: [1, 2],\n      number: 1,\n      event_type: 'push',\n      config: {\n        rvm: ['rbx', '1.9.3']\n      },\n      finished_at: '2012-06-20T00:21:20Z',\n      duration: 35,\n      result: 0\n    }, {\n      id: 2,\n      repository_id: '1',\n      commit_id: 2,\n      job_ids: [3],\n      number: 2,\n      event_type: 'push',\n      config: {\n        rvm: ['rbx']\n      }\n    }, {\n      id: 3,\n      repository_id: '2',\n      commit_id: 3,\n      job_ids: [4],\n      number: 3,\n      event_type: 'push',\n      config: {\n        rvm: ['rbx']\n      },\n      finished_at: '2012-06-20T00:21:20Z',\n      duration: 35,\n      result: 1\n    }, {\n      id: 4,\n      repository_id: '3',\n      commit_id: 4,\n      job_ids: [5],\n      number: 4,\n      event_type: 'push',\n      config: {\n        rvm: ['rbx']\n      }\n    }\n  ];\n\n  commits = [\n    {\n      id: 1,\n      sha: '1234567',\n      branch: 'master',\n      message: 'commit message 1',\n      author_name: 'author name',\n      author_email: 'author@email.com',\n      committer_name: 'committer name',\n      committer_email: 'committer@email.com',\n      compare_url: 'http://github.com/compare/0123456..1234567'\n    }, {\n      id: 2,\n      sha: '2345678',\n      branch: 'feature',\n      message: 'commit message 2',\n      author_name: 'author name',\n      author_email: 'author@email.com',\n      committer_name: 'committer name',\n      committer_email: 'committer@email.com',\n      compare_url: 'http://github.com/compare/0123456..2345678'\n    }, {\n      id: 3,\n      sha: '3456789',\n      branch: 'master',\n      message: 'commit message 3',\n      author_name: 'author name',\n      author_email: 'author@email.com',\n      committer_name: 'committer name',\n      committer_email: 'committer@email.com',\n      compare_url: 'http://github.com/compare/0123456..3456789'\n    }, {\n      id: 4,\n      sha: '4567890',\n      branch: 'master',\n      message: 'commit message 4',\n      author_name: 'author name',\n      author_email: 'author@email.com',\n      committer_name: 'committer name',\n      committer_email: 'committer@email.com',\n      compare_url: 'http://github.com/compare/0123456..4567890'\n    }\n  ];\n\n  jobs = [\n    {\n      id: 1,\n      repository_id: 1,\n      build_id: 1,\n      commit_id: 1,\n      log_id: 1,\n      number: '1.1',\n      config: {\n        rvm: 'rbx'\n      },\n      finished_at: '2012-06-20T00:21:20Z',\n      duration: 35,\n      result: 0\n    }, {\n      id: 2,\n      repository_id: 1,\n      build_id: 1,\n      commit_id: 1,\n      log_id: 2,\n      number: '1.2',\n      config: {\n        rvm: '1.9.3'\n      },\n      allow_failure: true\n    }, {\n      id: 3,\n      repository_id: 1,\n      build_id: 2,\n      commit_id: 2,\n      log_id: 3,\n      number: '2.1',\n      config: {\n        rvm: 'rbx'\n      }\n    }, {\n      id: 4,\n      repository_id: 2,\n      build_id: 3,\n      commit_id: 3,\n      log_id: 4,\n      number: '3.1',\n      config: {\n        rvm: 'rbx'\n      },\n      finished_at: '2012-06-20T00:21:20Z',\n      duration: 35,\n      result: 1\n    }, {\n      id: 5,\n      repository_id: 3,\n      build_id: 4,\n      commit_id: 4,\n      log_id: 5,\n      number: '4.1',\n      config: {\n        rvm: 'rbx'\n      }\n    }, {\n      id: 6,\n      repository_id: 1,\n      build_id: 5,\n      commit_id: 5,\n      log_id: 5,\n      number: '5.1',\n      config: {\n        rvm: 'rbx'\n      },\n      state: 'created',\n      queue: 'builds.common'\n    }, {\n      id: 7,\n      repository_id: 1,\n      build_id: 5,\n      commit_id: 5,\n      log_id: 5,\n      number: '5.2',\n      config: {\n        rvm: 'rbx'\n      },\n      state: 'created',\n      queue: 'builds.common'\n    }\n  ];\n\n  artifacts = [\n    {\n      id: 1,\n      body: 'log 1'\n    }, {\n      id: 2,\n      body: 'log 2'\n    }, {\n      id: 3,\n      body: 'log 3'\n    }, {\n      id: 4,\n      body: 'log 4'\n    }, {\n      id: 5,\n      body: 'log 4'\n    }\n  ];\n\n  workers = [\n    {\n      id: 1,\n      name: 'ruby-1',\n      host: 'worker.travis-ci.org',\n      state: 'ready'\n    }, {\n      id: 2,\n      name: 'ruby-2',\n      host: 'worker.travis-ci.org',\n      state: 'ready'\n    }\n  ];\n\n  hooks = [\n    {\n      slug: 'travis-ci/travis-core',\n      description: 'description of travis-core',\n      active: true,\n      \"private\": false\n    }, {\n      slug: 'travis-ci/travis-assets',\n      description: 'description of travis-assets',\n      active: false,\n      \"private\": false\n    }, {\n      slug: 'svenfuchs/minimal',\n      description: 'description of minimal',\n      active: true,\n      \"private\": false\n    }\n  ];\n\n  $.mockjax({\n    url: '/repositories',\n    responseTime: responseTime,\n    responseText: {\n      repositories: repositories\n    }\n  });\n\n  for (_i = 0, _len = repositories.length; _i < _len; _i++) {\n    repository = repositories[_i];\n    $.mockjax({\n      url: '/' + repository.slug,\n      responseTime: responseTime,\n      responseText: {\n        repository: repository\n      }\n    });\n  }\n\n  for (_j = 0, _len1 = builds.length; _j < _len1; _j++) {\n    build = builds[_j];\n    $.mockjax({\n      url: '/builds/' + build.id,\n      responseTime: responseTime,\n      responseText: {\n        build: build,\n        commit: commits[build.commit_id - 1],\n        jobs: (function() {\n          var _k, _len2, _ref, _results;\n          _ref = build.job_ids;\n          _results = [];\n          for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {\n            id = _ref[_k];\n            _results.push(jobs[id - 1]);\n          }\n          return _results;\n        })()\n      }\n    });\n  }\n\n  for (_k = 0, _len2 = repositories.length; _k < _len2; _k++) {\n    repository = repositories[_k];\n    $.mockjax({\n      url: '/builds',\n      data: {\n        repository_id: repository.id,\n        event_type: 'push',\n        orderBy: 'number DESC'\n      },\n      responseTime: responseTime,\n      responseText: {\n        builds: (function() {\n          var _l, _len3, _ref, _results;\n          _ref = repository.build_ids;\n          _results = [];\n          for (_l = 0, _len3 = _ref.length; _l < _len3; _l++) {\n            id = _ref[_l];\n            _results.push(builds[id - 1]);\n          }\n          return _results;\n        })(),\n        commits: (function() {\n          var _l, _len3, _ref, _results;\n          _ref = repository.build_ids;\n          _results = [];\n          for (_l = 0, _len3 = _ref.length; _l < _len3; _l++) {\n            id = _ref[_l];\n            _results.push(commits[builds[id - 1].commit_id - 1]);\n          }\n          return _results;\n        })()\n      }\n    });\n  }\n\n  for (_l = 0, _len3 = jobs.length; _l < _len3; _l++) {\n    job = jobs[_l];\n    $.mockjax({\n      url: '/jobs/' + job.id,\n      responseTime: responseTime,\n      responseText: {\n        job: job,\n        commit: commits[job.commit_id - 1]\n      }\n    });\n  }\n\n  for (_m = 0, _len4 = artifacts.length; _m < _len4; _m++) {\n    artifact = artifacts[_m];\n    $.mockjax({\n      url: '/artifacts/' + artifact.id,\n      responseTime: responseTime,\n      responseText: {\n        artifact: artifact\n      }\n    });\n  }\n\n  $.mockjax({\n    url: '/workers',\n    responseTime: responseTime,\n    responseText: {\n      workers: workers\n    }\n  });\n\n  $.mockjax({\n    url: '/jobs',\n    responseTime: responseTime,\n    responseText: {\n      jobs: $.select(jobs, function(job) {\n        return job.state === 'created';\n      })\n    }\n  });\n\n  $.mockjax({\n    url: '/profile/hooks',\n    responseTime: responseTime,\n    responseText: {\n      hooks: hooks\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=mocks");minispade.register('travis/log', "(function() {(function() {\n\n  this.Travis.Log = {\n    FOLDS: {\n      schema: /(<p.*?\\/a>\\$ (?:bundle exec )?rake( db:create)? db:schema:load[\\s\\S]*?<p.*?\\/a>-- assume_migrated_upto_version[\\s\\S]*?<\\/p>\\n<p.*?\\/a>.*<\\/p>)/g,\n      migrate: /(<p.*?\\/a>\\$ (?:bundle exec )?rake( db:create)? db:migrate[\\s\\S]*== +\\w+: migrated \\(.*\\) =+)/g,\n      bundle: /(<p.*?\\/a>\\$ bundle install.*<\\/p>\\n(<p.*?\\/a>(Updating|Using|Installing|Fetching|remote:|Receiving|Resolving).*?<\\/p>\\n|<p.*?\\/a><\\/p>\\n)*)/g,\n      exec: /(<p.*?\\/a>[\\/\\w]*.rvm\\/rubies\\/[\\S]*?\\/(ruby|rbx|jruby) .*?<\\/p>)/g\n    },\n    filter: function(log) {\n      log = this.escape(log);\n      log = this.deansi(log);\n      log = log.replace(/\\r/g, '');\n      log = this.number(log);\n      log = this.fold(log);\n      log = log.replace(/\\n/g, '');\n      return log;\n    },\n    stripPaths: function(log) {\n      return log.replace(/\\/home\\/vagrant\\/builds(\\/[^\\/\\n]+){2}\\//g, '');\n    },\n    escape: function(log) {\n      return Handlebars.Utils.escapeExpression(log);\n    },\n    escapeRuby: function(log) {\n      return log.replace(/#<(\\w+.*?)>/, '#&lt;$1&gt;');\n    },\n    number: function(log) {\n      var result;\n      result = '';\n      $.each(log.trim().split('\\n'), function(ix, line) {\n        var number, path;\n        number = ix + 1;\n        path = Travis.Log.location().substr(1).replace(/\\/L\\d+/, '') + '/L' + number;\n        return result += '<p><a href=\\'#%@\\' id=\\'%@\\' name=\\'L%@\\'>%@</a>%@</p>\\n'.fmt(path, path, number, number, line);\n      });\n      return result.trim();\n    },\n    deansi: function(log) {\n      var ansi, text;\n      log = log.replace(/\\r\\r/g, '\\r').replace(/\\033\\[K\\r/g, '\\r').replace(/^.*\\r(?!$)/g, '').replace(/\u001b\\[2K/g, '').replace(/\\033\\(B/g, '');\n      ansi = ansiparse(log);\n      text = '';\n      ansi.forEach(function(part) {\n        var classes;\n        classes = [];\n        part.foreground && classes.push(part.foreground);\n        part.background && classes.push('bg-' + part.background);\n        part.bold && classes.push('bold');\n        part.italic && classes.push('italic');\n        return text += (classes.length ? '<span class=\\'' + classes.join(' ') + '\\'>' + part.text + '</span>' : part.text);\n      });\n      return text.replace(/\\033/g, '');\n    },\n    fold: function(log) {\n      log = this.unfold(log);\n      $.each(Travis.Log.FOLDS, function(name, pattern) {\n        return log = log.replace(pattern, function() {\n          return '<div class=\\'fold ' + name + '\\'>' + arguments[1].trim() + '</div>';\n        });\n      });\n      return log;\n    },\n    unfold: function(log) {\n      return log.replace(/<div class='fold[^']*'>([\\s\\S]*?)<\\/div>/g, '$1\\n');\n    },\n    location: function() {\n      return window.location.hash;\n    }\n  };\n\n}).call(this);\n\n})();\n//@ sourceURL=travis/log");minispade.register('travis/model', "(function() {(function() {\n\n  this.Travis.Model = DS.Model.extend({\n    primaryKey: 'id',\n    id: DS.attr('number'),\n    refresh: function() {\n      var id;\n      id = this.get('id');\n      if (id) {\n        return Travis.app.store.adapter.find(Travis.app.store, this.constructor, id);\n      }\n    },\n    update: function(attrs) {\n      var _this = this;\n      $.each(attrs, function(key, value) {\n        if (key !== 'id') {\n          return _this.set(key, value);\n        }\n      });\n      return this;\n    }\n  });\n\n  this.Travis.Model.reopenClass({\n    load: function(attrs) {\n      return Travis.app.store.load(this, attrs);\n    },\n    buildURL: function(suffix) {\n      var base, url;\n      base = this.url || this.pluralName();\n      Ember.assert('Base URL (' + base + ') must not start with slash', !base || base.toString().charAt(0) !== '/');\n      Ember.assert('URL suffix (' + suffix + ') must not start with slash', !suffix || suffix.toString().charAt(0) !== '/');\n      url = [base];\n      if (suffix !== void 0) {\n        url.push(suffix);\n      }\n      return url.join('/');\n    },\n    singularName: function() {\n      var name, parts;\n      parts = this.toString().split('.');\n      name = parts[parts.length - 1];\n      return name.replace(/([A-Z])/g, '_$1').toLowerCase().slice(1);\n    },\n    pluralName: function() {\n      return Travis.app.store.adapter.pluralize(this.singularName());\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=travis/model");minispade.register('travis/ticker', "(function() {(function() {\n\n  this.Travis.Ticker = Ember.Object.extend({\n    init: function() {\n      if (this.get('interval') !== -1) {\n        return this.schedule();\n      }\n    },\n    tick: function() {\n      var context, target, targets, _i, _len;\n      context = this.get('context');\n      targets = this.get('targets') || [this.get('target')];\n      for (_i = 0, _len = targets.length; _i < _len; _i++) {\n        target = targets[_i];\n        if (context) {\n          target = context.get(target);\n        }\n        if (target) {\n          target.tick();\n        }\n      }\n      return this.schedule();\n    },\n    schedule: function() {\n      var _this = this;\n      return Ember.run.later((function() {\n        return _this.tick();\n      }), this.get('interval') || Travis.app.TICK_INTERVAL);\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=travis/ticker");minispade.register('ext/ember/bound_helper', "(function() {// https://gist.github.com/2018185\n// For reference: https://github.com/wagenet/ember.js/blob/ac66dcb8a1cbe91d736074441f853e0da474ee6e/packages/ember-handlebars/lib/views/bound_property_view.js\nvar BoundHelperView = Ember.View.extend(Ember._Metamorph, {\n\n  context: null,\n  options: null,\n  property: null,\n  // paths of the property that are also observed\n  propertyPaths: [],\n\n  value: Ember.K,\n\n  valueForRender: function() {\n    var value = this.value(Ember.getPath(this.context, this.property), this.options);\n    if (this.options.escaped) { value = Handlebars.Utils.escapeExpression(value); }\n    return value;\n  },\n\n  render: function(buffer) {\n    buffer.push(this.valueForRender());\n  },\n\n  valueDidChange: function() {\n    if (this.morph.isRemoved()) { return; }\n    this.morph.html(this.valueForRender());\n  },\n\n  didInsertElement: function() {\n    this.valueDidChange();\n  },\n\n  init: function() {\n    this._super();\n    Ember.addObserver(this.context, this.property, this, 'valueDidChange');\n    this.get('propertyPaths').forEach(function(propName) {\n        Ember.addObserver(this.context, this.property + '.' + propName, this, 'valueDidChange');\n    }, this);\n  },\n\n  destroy: function() {\n    Ember.removeObserver(this.context, this.property, this, 'valueDidChange');\n    this.get('propertyPaths').forEach(function(propName) {\n        this.context.removeObserver(this.property + '.' + propName, this, 'valueDidChange');\n    }, this);\n    this._super();\n  }\n\n});\n\nEmber.registerBoundHelper = function(name, func) {\n  var propertyPaths = Array.prototype.slice.call(arguments, 2);\n  Ember.Handlebars.registerHelper(name, function(property, options) {\n    var data = options.data,\n        view = data.view,\n        ctx  = this;\n\n    var bindView = view.createChildView(BoundHelperView, {\n      property: property,\n      propertyPaths: propertyPaths,\n      context: ctx,\n      options: options.hash,\n      value: func\n    });\n\n    view.appendChild(bindView);\n  });\n};\n\n\n})();\n//@ sourceURL=ext/ember/bound_helper");minispade.register('ext/ember/namespace', "(function() {Em.Namespace.reopen = Em.Namespace.reopenClass\n\n\n\n})();\n//@ sourceURL=ext/ember/namespace");